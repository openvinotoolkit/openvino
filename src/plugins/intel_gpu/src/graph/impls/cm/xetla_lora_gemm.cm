/*******************************************************************************
 * Copyright (c) 2022-2025 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/

#include "include/batch_headers/cm_xetla.h"

namespace KERNEL_NAME {

#include "include/xetla_lora.h"

#define arch_tag gpu_arch::Xe

_GENX_MAIN_ void KERNEL_NAME(
        XETLA_SHAPE_INFO_ARG
        LORA_DTYPE_A *mat_a [[type("svmptr_t")]],
        LORA_DTYPE_B *mat_b [[type("svmptr_t")]],
        LORA_DTYPE_C *out [[type("svmptr_t")]],
        LORA_DTYPE_ACC *acc [[type("svmptr_t")]],
        uint32_t *cnt [[type("svmptr_t")]]
        XETLA_POST_OP_KERNEL_ARGS) {

    sycl::nd_item<3> item;

    static constexpr uint32_t periodic_sync_interval = 8;
    static constexpr uint32_t prefetch_distance = (128 / (LORA_SG_K * sizeof(LORA_DTYPE_A)));

    const uint32_t m = LORA_SIZE_M;
    const uint32_t k = LORA_SIZE_K;
    const uint32_t n = LORA_SIZE_N;
    const uint32_t lda
            = LORA_MEM_LAYOUT_A == mem_layout::col_major ? m : k;
    const uint32_t ldb
            = LORA_MEM_LAYOUT_B == mem_layout::col_major ? k : n;
    const uint32_t ldc
            = LORA_MEM_LAYOUT_C == mem_layout::col_major ? m : n;

    static constexpr bool unaligned = LORA_UNALIGNED;

    static_assert(!(unaligned && (LORA_MMA_ENGINE == mma_engine::fpu)),
            "FPU engine GEMM does not support unaligned access");

    using gemm_t = gemm_universal<LORA_DTYPE_A, LORA_DTYPE_B, LORA_DTYPE_C,
            LORA_DTYPE_ACC, LORA_WG_M, LORA_WG_N, LORA_SG_M, LORA_SG_N,
            LORA_SG_K, LORA_MEM_LAYOUT_A, LORA_MEM_LAYOUT_B, LORA_MEM_LAYOUT_C,
            mem_space::global, mem_space::global, mem_space::global,
            LORA_LOCAL_SLICING, LORA_GLOBAL_SLICING, LORA_MMA_ENGINE,
            periodic_sync_interval, prefetch_distance, arch_tag, 0, unaligned>;

    if constexpr (gemm_t::barrier_count != 0) {
        cm_nbarrier_init(gemm_t::barrier_count);
    }
    if constexpr (gemm_t::slm_size != 0) { cm_slm_init(gemm_t::slm_size); }

    gemm_t::run(item, mat_a, mat_b, out, acc, cnt, m, n, k, lda, ldb,
            ldc XETLA_POST_OP_ARGS_PASS);
}
}

#!/usr/bin/env python

#
# Copyright (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

import json
import os

from common.enums import InputSourceFileType
from common.source_description_schema import InputSource


class FilesStorage:
    source_file_types = [name for name, _ in InputSourceFileType.__members__.items()]
    source_description = (
        f"""It is possible to specify three types of inputs:
two from the list {source_file_types} and a path to a JSON file contained inputs description."
Please look at the required JSON formats:\n
1) If you want to specify files as "{InputSourceFileType.image.name}", please use the following format:"""
        + '''
"{
    \\"my_model_input\\": {
        \\"files\\": [
            image_path_0,
            image_path_1,
            ...
        ],
        \\"type\\":\\"'''
        + InputSourceFileType.image.name
        + '''\\"
    }
}"
\n2) If you want to specify files as "'''
        + InputSourceFileType.image.name
        + """", and convert them to different shape or data type please add a "convert" section and use the following format:"""
        + '''
"{
    \\"my_model_input\\": {
        \\"files\\": [
            image_path_0,
            image_path_1,
            ...
        ],
        \\"type\\":\\"'''
        + InputSourceFileType.image.name
        + '''\\",
        \\"convert\\":{\\"shape\\":\\"[1,3,372,500]\\", \\"element_type\\":\\"float32\\"}
    }
}"

\n3) If you want to specify files as "'''
        + InputSourceFileType.bin.name
        + """", please use the following format:"""
        + '''
"{
    \\"my_model_input.1\\": {
        \\"files\\": [
            blob_path_0,
            blob_path_1,
            ...
        ],
        \\"type\\": \\"'''
        + InputSourceFileType.bin.name
        + """\\",
        \\"shape\\": [1, 3, 299, 299],
        \\"layout\\": \\"NCHW\\",
        \\"element_type\": numpy.dtype.name
    }
}"
\n4) Or just specify a path to input descriptions in JSON files, which
are automatically generated by the tool every time it finishes inference.
Location of these files usually described by the paths:

    "<provider_name>/<model_name>/input_img.json"
or
    "<provider_name>/<model_name>/input_dump_data.json"

"""
    )

    def __init__(self):
        self.files_per_input_json = {}

    @staticmethod
    def __parse_json_obj__(json_data):
        return_json_data = {}
        for io_name, io_data in json_data.items():
            return_json_data[io_name] = InputSource(io_data)
        return return_json_data

    def parse_inputs(self, console_input_files_list_per_model: str):
        if os.path.isfile(console_input_files_list_per_model):
            with open(console_input_files_list_per_model) as file:
                json_input = json.load(file)
        else:
            try:
                json_input = json.loads(console_input_files_list_per_model)
            except json.JSONDecodeError as ex:
                raise RuntimeError(f"Cannot parse JSON input: {repr(console_input_files_list_per_model)[1:-1]}. Error: {ex}") from None

        self.files_per_input_json = FilesStorage.__parse_json_obj__(json_input)

    def inputs(self):
        return self.files_per_input_json


class UseCaseFiles:
    use_case_separator = ";"

    def __init__(self, console_input_files_list):
        self.files_per_case = UseCaseFiles.parse_inputs(console_input_files_list)

    @staticmethod
    def parse_inputs(console_input_files_list: str):
        if console_input_files_list is None:
            return []

        files_per_case = []
        file_paths_per_case = console_input_files_list.split(UseCaseFiles.use_case_separator)
        for case_files in file_paths_per_case:
            files_aggregator = FilesStorage()
            files_aggregator.parse_inputs(case_files)
            files_per_case.append(files_aggregator)
        return files_per_case

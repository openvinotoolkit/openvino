---

### NOTE:
# The 'Checks: >' is a multiline string here. Comment must not be moved into the string.
#
### Scopes to be enabled:
#
# readability-*,
#
### Checks that are turned off for a reason:
#
# -cppcoreguidelines-avoid-c-arrays. There are a lot of code which uses C-style arrays
# -cppcoreguidelines-avoid-do-while. Just stylistic preference
# -cppcoreguidelines-explicit-virtual-functions. Forbids 'override final' usage
# -cppcoreguidelines-init-variables. Too many unnecessary initializations
# -cppcoreguidelines-macro-usage. There are macros defined by OV that are matching this check
# -cppcoreguidelines-misleading-capture-default-by-value. Commonly used in the transformations code
# -cppcoreguidelines-non-private-member-variables-in-classes. There are a lot of code which uses protected members directly
# -cppcoreguidelines-owning-memory. There is a code which uses raw pointers
# -cppcoreguidelines-pro-bounds-array-to-pointer-decay. There are a lot of code which uses array to pointer conversion
# -cppcoreguidelines-pro-bounds-constant-array-index. Size is deduced incorrectly from the array type
# -cppcoreguidelines-pro-bounds-pointer-arithmetic
# -cppcoreguidelines-pro-type-const-cast. There is some code which uses const_cast and cannot get rid of that
# -cppcoreguidelines-pro-type-reinterpret-cast. There are a lot of code which uses reinterpret_cast
# -cppcoreguidelines-pro-type-static-cast-downcast. Performance impact
# -cppcoreguidelines-pro-type-member-init. Too many unnecessary initializations
# -cppcoreguidelines-pro-type-union-access. There are a lot of code which uses unions
# -cppcoreguidelines-pro-type-vararg. There are a lot of code which uses vararg functions
# -cppcoreguidelines-rvalue-reference-param-not-moved. There are a lot of code which uses rvalue references
# -cppcoreguidelines-special-member-functions. There are a lot of code which does not define all copy/move constructors/assignment operators
# -google-readability-todo. No big reason to enforce
# -modernize-use-trailing-return-type. Just stylistic preference
# -misc-const-correctness. No big reason to enforce
# -misc-no-recursion. No big reason to enforce
# -readability-identifier-length. A lot of code use short names for readability, i.e. 'B' for batch
# -readability-uppercase-literal-suffix. 
#
### Checks that are turned off but better be enabled later:
# -bugprone-narrowing-conversions
# -bugprone-easily-swappable-parameters
# -bugprone-exception-escape. There are a lot of legacy code which does not handle exceptions properly and just catches them all. Major refactoring is required to correct this.
# -bugprone-implicit-widening-of-multiplication-result
# -bugprone-incorrect-roundings. There are explicit ways to perform rounding (i.e. std::floor(), std::round(), etc). Requires careful updates case by case
# -bugprone-signed-char-misuse. The source code contains valid logic when pointer to the data is interpreted as int8_t (i.e. weights tensor)
# -cppcoreguidelines-avoid-const-or-ref-data-members
# -cppcoreguidelines-avoid-non-const-global-variables
# -cppcoreguidelines-narrowing-conversions
# -google-default-arguments,
# -google-explicit-constructor,
# -google-readability-casting,
# -modernize-avoid-c-arrays,
# -misc-header-include-cycle,
# -misc-include-cleaner,
# -misc-non-private-member-variables-in-classes,
# -misc-use-anonymous-namespace,
# -readability-magic-numbers, cppcoreguidelines-avoid-magic-numbers
# -readability-function-cognitive-complexity. Reasonable way to enforce splitting complex code into simple functions
# Remove warning disablement after CI pipeline migrates to C++17 from C++20 for:
# -modernize-use-constraints,
# -modernize-use-std-numbers

Checks: >
  -*,
  bugprone-*,
  cppcoreguidelines-*,
  performance-*,
  google-*,
  modernize-*,
  misc-*,
  readability-container-size-empty,
  readability-else-after-return,
  readability-implicit-bool-conversion,
  -bugprone-easily-swappable-parameters,
  -bugprone-exception-escape,
  -bugprone-implicit-widening-of-multiplication-result,
  -bugprone-incorrect-roundings,
  -bugprone-narrowing-conversions,
  -bugprone-signed-char-misuse,
  -cppcoreguidelines-avoid-c-arrays,
  -cppcoreguidelines-avoid-const-or-ref-data-members,
  -cppcoreguidelines-avoid-do-while,
  -cppcoreguidelines-avoid-non-const-global-variables,
  -cppcoreguidelines-explicit-virtual-functions,
  -cppcoreguidelines-init-variables,
  -cppcoreguidelines-macro-usage,
  -cppcoreguidelines-misleading-capture-default-by-value,
  -cppcoreguidelines-narrowing-conversions,
  -cppcoreguidelines-non-private-member-variables-in-classes,
  -cppcoreguidelines-owning-memory,
  -cppcoreguidelines-pro-bounds-array-to-pointer-decay,
  -cppcoreguidelines-pro-bounds-constant-array-index,
  -cppcoreguidelines-pro-bounds-pointer-arithmetic,
  -cppcoreguidelines-pro-type-const-cast,
  -cppcoreguidelines-pro-type-member-init,
  -cppcoreguidelines-pro-type-reinterpret-cast,
  -cppcoreguidelines-pro-type-static-cast-downcast,
  -cppcoreguidelines-pro-type-union-access,
  -cppcoreguidelines-pro-type-vararg,
  -cppcoreguidelines-rvalue-reference-param-not-moved,
  -cppcoreguidelines-special-member-functions,
  -google-build-using-namespace,
  -google-explicit-constructor,
  -google-readability-casting,
  -google-readability-todo,
  -modernize-avoid-c-arrays,
  -modernize-use-constraints,
  -modernize-use-std-numbers,
  -modernize-use-trailing-return-type,
  -misc-header-include-cycle,
  -misc-const-correctness,
  -misc-include-cleaner,
  -misc-no-recursion,
  -misc-non-private-member-variables-in-classes,
  -misc-use-anonymous-namespace,
  -readability-identifier-length,
  -readability-magic-numbers,
  -cppcoreguidelines-avoid-magic-numbers,
  -readability-uppercase-literal-suffix,
  -readability-function-cognitive-complexity,
# Treat warnings as errors
WarningsAsErrors: '*'
# Use clang-format for applied fixes
FormatStyle: file
HeaderFilterRegex: ''
CheckOptions:
  - key: cppcoreguidelines-avoid-do-while.IgnoreMacros
    value: true
  # matches with corresponding cpplink check  
  - key: google-readability-namespace-comments.ShortNamespaceLines
    value: "10"
  # matches with corresponding cpplink check  
  - key: google-readability-namespace-comments.SpacesBeforeComments
    value: "2"
  - key: modernize-loop-convert.MinConfidence
    value: reasonable
  - key: modernize-pass-by-value.IncludeStyle
    value: google
  - key: modernize-use-auto.MinTypeNameLength
    value: "3"
  - key: modernize-use-override.AllowOverrideAndFinal
    value: true
  - key: readability-implicit-bool-conversion.AllowIntegerConditions
    value: true
  - key: readability-implicit-bool-conversion.AllowPointerConditions
    value: true
 # Unifies the usage of the statements
  - key: readability-braces-around-statements.ShortStatementLines
    value: "1"
### To be considered to enable:
#  Reasonable way to enforce splitting complex code into simple functions
#  - key: google-readability-function-size.StatementThreshold
#    value: "800"
---

import numpy as np
import openvino.utils.decorators
import typing
from functools import partial as partial
from openvino._pyopenvino import Node as Node, Type as Type
from openvino.opset1.ops import convert_like as convert_like
from openvino.utils.decorators import binary_op as binary_op, nameable_op as nameable_op
from openvino.utils.types import as_nodes as as_nodes

def bitwise_left_shift(left, right, *args, **kwargs) -> openvino._pyopenvino.Node: ...
def bitwise_right_shift(left, right, *args, **kwargs) -> openvino._pyopenvino.Node: ...
def col2im(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def embedding_bag_offsets(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def embedding_bag_packed(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def roi_align_rotated(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def scatter_nd_update(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def search_sorted(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def slice_scatter(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def squeeze(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def stft(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def string_tensor_pack(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def string_tensor_unpack(*args, **kwargs) -> openvino._pyopenvino.Node: ...

NodeInput: typing._UnionGenericAlias
constant: openvino.utils.decorators.MultiMethod

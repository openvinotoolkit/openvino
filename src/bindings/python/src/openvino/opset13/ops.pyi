import logging as logging
import numpy as np
import openvino.utils.decorators
import typing
from functools import partial as partial, singledispatch as singledispatch
from openvino._pyopenvino import Node as Node, Output as Output, Shape as Shape, Tensor as Tensor, Type as Type
from openvino._pyopenvino.op import Constant as Constant, Result as Result
from openvino.opset1.ops import convert_like as convert_like
from openvino.utils.decorators import binary_op as binary_op, nameable_op as nameable_op, overloading as overloading, unary_op as unary_op
from openvino.utils.types import as_node as as_node, as_nodes as as_nodes

def bitwise_and(left, right, *args, **kwargs) -> openvino._pyopenvino.Node: ...
def bitwise_not(input_value, *args, **kwargs) -> openvino._pyopenvino.Node: ...
def bitwise_or(left, right, *args, **kwargs) -> openvino._pyopenvino.Node: ...
def bitwise_xor(left, right, *args, **kwargs) -> openvino._pyopenvino.Node: ...
def fake_convert(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def fake_quantize(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def multinomial(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def nms_rotated(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def result(input_value, *args, **kwargs) -> openvino._pyopenvino.Node: ...
def scaled_dot_product_attention(*args, **kwargs) -> openvino._pyopenvino.Node: ...

NodeInput: typing._UnionGenericAlias
NumericData: typing._UnionGenericAlias
NumericType: typing._UnionGenericAlias
constant: openvino.utils.decorators.MultiMethod
log: logging.Logger

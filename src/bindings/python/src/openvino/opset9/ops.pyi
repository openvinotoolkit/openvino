import numpy as np
import openvino._pyopenvino
import typing
from functools import partial as partial
from openvino._pyopenvino import Node as Node
from openvino.utils.decorators import nameable_op as nameable_op
from openvino.utils.types import as_node as as_node, as_nodes as as_nodes, make_constant_node as make_constant_node

def eye(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def generate_proposals(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def grid_sample(data: typing.Union[openvino._pyopenvino.Node, int, float, numpy.ndarray], grid: typing.Union[openvino._pyopenvino.Node, int, float, numpy.ndarray], attributes: dict, name: typing.Optional[str] = ...) -> openvino._pyopenvino.Node: ...
def irdft(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def multiclass_nms(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def non_max_suppression(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def rdft(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def roi_align(data: typing.Union[openvino._pyopenvino.Node, int, float, numpy.ndarray], rois: typing.Union[openvino._pyopenvino.Node, int, float, numpy.ndarray], batch_indices: typing.Union[openvino._pyopenvino.Node, int, float, numpy.ndarray], pooled_h: int, pooled_w: int, sampling_ratio: int, spatial_scale: float, mode: str, aligned_mode: typing.Optional[str] = ..., name: typing.Optional[str] = ...) -> openvino._pyopenvino.Node: ...
def softsign(node: typing.Union[openvino._pyopenvino.Node, int, float, numpy.ndarray], name: typing.Optional[str] = ...) -> openvino._pyopenvino.Node: ...

NodeInput: typing._UnionGenericAlias

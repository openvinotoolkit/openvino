# type: ignore
from __future__ import annotations
import openvino._pyopenvino
import typing
"""
openvino.layout_helpers
"""
__all__ = ['batch_idx', 'channels_idx', 'depth_idx', 'get_layout', 'has_batch', 'has_channels', 'has_depth', 'has_height', 'has_width', 'height_idx', 'set_layout', 'width_idx']
def batch_idx(layout: openvino._pyopenvino.Layout) -> int:
    ...
def channels_idx(layout: openvino._pyopenvino.Layout) -> int:
    ...
def depth_idx(layout: openvino._pyopenvino.Layout) -> int:
    ...
@typing.overload
def get_layout(port: openvino._pyopenvino.Output) -> openvino._pyopenvino.Layout:
    ...
@typing.overload
def get_layout(port: openvino._pyopenvino.ConstOutput) -> openvino._pyopenvino.Layout:
    ...
def has_batch(layout: openvino._pyopenvino.Layout) -> bool:
    ...
def has_channels(layout: openvino._pyopenvino.Layout) -> bool:
    ...
def has_depth(layout: openvino._pyopenvino.Layout) -> bool:
    ...
def has_height(layout: openvino._pyopenvino.Layout) -> bool:
    ...
def has_width(layout: openvino._pyopenvino.Layout) -> bool:
    ...
def height_idx(layout: openvino._pyopenvino.Layout) -> int:
    ...
def set_layout(port: openvino._pyopenvino.Output, layout: openvino._pyopenvino.Layout) -> None:
    ...
def width_idx(layout: openvino._pyopenvino.Layout) -> int:
    ...

import numpy as np
import openvino._pyopenvino
import typing
from functools import partial as partial
from openvino._pyopenvino import Node as Node
from openvino._pyopenvino.op import Constant as Constant, Parameter as Parameter, if_op as if_op
from openvino.exceptions import UserInputError as UserInputError
from openvino.utils.decorators import nameable_op as nameable_op
from openvino.utils.input_validation import check_valid_attributes as check_valid_attributes, is_non_negative_value as is_non_negative_value, is_positive_value as is_positive_value
from openvino.utils.types import as_node as as_node, as_nodes as as_nodes

def adaptive_avg_pool(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def adaptive_max_pool(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def deformable_convolution(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def detection_output(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def gather(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def gather_nd(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def i420_to_bgr(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def i420_to_rgb(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def matrix_nms(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def max_pool(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def multiclass_nms(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def nv12_to_bgr(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def nv12_to_rgb(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def prior_box(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def random_uniform(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def slice(*args, **kwargs) -> openvino._pyopenvino.Node: ...
def softmax(*args, **kwargs) -> openvino._pyopenvino.Node: ...

NodeInput: typing._UnionGenericAlias
TensorShape: typing._GenericAlias

node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
      }
    }
  }
}
node {
  name: "y"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "Greater"
  op: "Greater"
  input: "x"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "If"
  op: "If"
  input: "Greater"
  input: "x"
  input: "y"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT32
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "else_branch_func_Fw4jHLGozIk"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "then_branch_func_mdn8Hcdd6RQ"
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
}
library {
  function {
    signature {
      name: "then_branch_func_mdn8Hcdd6RQ"
      input_arg {
        name: "x"
        type: DT_INT32
      }
      input_arg {
        name: "y"
        type: DT_INT32
      }
      output_arg {
        name: "add"
        type: DT_INT32
      }
    }
    node_def {
      name: "add_0"
      op: "AddV2"
      input: "x"
      input: "y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "add"
      }
    }
    ret {
      key: "add"
      value: "add_0:z:0"
    }
    attr {
      key: "_disable_call_shape_inference"
      value {
        b: true
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                unknown_rank: true
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                unknown_rank: true
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "else_branch_func_Fw4jHLGozIk"
      input_arg {
        name: "x"
        type: DT_INT32
      }
      input_arg {
        name: "y"
        type: DT_INT32
      }
      output_arg {
        name: "sub"
        type: DT_INT32
      }
    }
    node_def {
      name: "sub_0"
      op: "Sub"
      input: "x"
      input: "y"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      experimental_debug_info {
        original_node_names: "sub"
      }
    }
    ret {
      key: "sub"
      value: "sub_0:z:0"
    }
    attr {
      key: "_disable_call_shape_inference"
      value {
        b: true
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                unknown_rank: true
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                unknown_rank: true
              }
            }
          }
        }
      }
    }
  }
}
versions {
  producer: 808
  min_consumer: 12
}

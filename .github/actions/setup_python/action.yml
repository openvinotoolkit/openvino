name: 'Setup Python and pip cache'
description: 'Setups Python with the provided version and sets up the pip cache'
inputs:
  version:
    description: 'Python version to install'
    required: true
  pip-cache-path:
    description: 'Path on share where the pip cache is stored'
    required: false
  should-setup-pip-paths:
    description: 'If the action should setup `PIP_CACHE_DIR` & `PIP_INSTALL_PATH` env variables'
    required: false
    default: 'false'
  self-hosted-runner:
    description: 'If the runner is self-hosted'
    required: false
    default: 'true'
  show-cache-info:
    description: 'If the action should show the share space occupied by cache'
    required: false
    default: 'false'
runs:
  using: 'composite'
  steps:

    - name: Check if Python is already installed (Linux)
      if: ${{ runner.os == 'Linux' }}
      shell: bash
      id: check_python
      run: |
        PYTHON_INSTALLED=$(python${{ inputs.version }} -V) || true
        if [[ $PYTHON_INSTALLED ]]; then
          echo "installed=true" >> $GITHUB_OUTPUT
        else
          echo "installed=false" >> $GITHUB_OUTPUT
        fi

    - if: ${{ runner.os == 'Linux' && inputs.self-hosted-runner == 'true' && steps.check_python.outputs.installed == 'false' }}
      name: Install 'actions/setup-python@v4' dependencies
      shell: bash
      run: apt-get update && apt-get install -y ca-certificates software-properties-common gpg-agent tzdata
      env:
        DEBIAN_FRONTEND: noninteractive # to prevent apt-get from waiting user input
        TZ: "Europe/London" # to prevent tzdata from waiting user input

    - if: ${{ runner.os == 'Linux' && runner.arch == 'ARM64' && steps.check_python.outputs.installed == 'false'  }}
      name: Setup sudo and python3
      shell: bash
      run: apt-get update && apt-get install -y sudo python3 # Needed for the deadsnakes action

    - if: ${{ runner.os == 'Linux' && runner.arch == 'ARM64' && steps.check_python.outputs.installed == 'false'  }}
      name: Setup Python ${{ inputs.version }}
      uses: akashchi/deadsnakes-action@92417281055a5878a0450f240a5b95883eb2d7e2
      with:
        python-version: ${{ inputs.version }}

    - if: ${{ runner.os == 'macOS' || runner.os == 'Windows' || (runner.os == 'Linux' && runner.arch != 'ARM64' && steps.check_python.outputs.installed == 'false' ) }}
      name: Setup Python ${{ inputs.version }}
      uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
      with:
        python-version: ${{ inputs.version }}
      env:
        PIP_CACHE_DIR: ${{ inputs.self-hosted-runner == 'true' && inputs.pip-cache-path || '' }}

    - if: ${{ inputs.should-setup-pip-paths == 'true' && runner.os != 'Windows' }}
      name: Setup pip variables (cache and install path)
      shell: bash
      run: |
        PIP_VER=$(python3 -c "import pip; print(pip.__version__)")
        echo "Using pip version: ${PIP_VER}"
        echo "PIP_CACHE_DIR=${{ inputs.pip-cache-path }}/${PIP_VER}" >> $GITHUB_ENV
        echo "PIP_INSTALL_PATH=$(python3 -c 'import sysconfig; print(sysconfig.get_paths()["purelib"])')" >> $GITHUB_ENV

    - if: ${{ inputs.should-setup-pip-paths == 'true' && runner.os == 'Windows' }}
      name: Setup pip cache path
      shell: pwsh
      run: |
        $pipVersion = python3 -c "import pip; print(pip.__version__)"
        Write-Host "Using pip version: $pipVersion"
        "PIP_CACHE_DIR=${{ inputs.pip-cache-path }}/$pipVersion" >> $env:GITHUB_ENV

    - if: ${{ inputs.show-cache-info == 'true' }}
      name: Get pip cache info
      shell: bash
      run: |
        echo "Cache size: "
        du -h -d2 ${{ env.PIP_CACHE_DIR }}
        echo "Cache info: "
        python3 -m pip cache info
      continue-on-error: true

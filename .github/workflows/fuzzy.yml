name: fuzzy (Ubuntu 22.04, Python 3.11)
on:
  schedule:
    # at 00:00 on Saturday
    - cron: '0 0 * * 6'
  workflow_dispatch:
    inputs:
      target-branch:
        description: 'Target branch for the build; taken from event context by default'
        type: string
        required: false
  pull_request:
  merge_group:
  push:
    branches:
      - master
      - 'releases/**'

concurrency:
  # github.ref is not unique in post-commit
  group: ${{ github.event_name == 'push' && github.run_id || github.ref }}-ubuntu-22
  cancel-in-progress: true

permissions: read-all

env:
  PIP_CACHE_PATH: /mount/caches/pip/linux
  PYTHON_VERSION: '3.11'
  TARGET_BRANCH: ${{ inputs.target-branch || github.base_ref || github.event.merge_group.base_ref || github.ref }}

jobs:
  Smart_CI:
    runs-on: ubuntu-latest
    outputs:
      affected_components: "${{ steps.smart_ci.outputs.affected_components }}"
      changed_components: "${{ steps.smart_ci.outputs.changed_components }}"
      skip_workflow: "${{ steps.smart_ci.outputs.skip_workflow }}"
    steps:
      - name: checkout action
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        timeout-minutes: 15
        with:
          sparse-checkout: .github/actions/smart-ci

      - name: Get affected components
        id: smart_ci
        uses: ./.github/actions/smart-ci
        with:
          repository: ${{ github.repository }}
          pr: ${{ github.event.number }}
          commit_sha: ${{ github.sha }}
          ref_name: ${{ github.ref_name }}
          component_pattern: "category: (.*)"
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          skip_when_only_listed_labels_set: 'docs'
          skip_when_only_listed_files_changed: '*.md,*.rst,*.png,*.jpg,*.svg'

      - name: Show affected components
        run: |
          echo "${{ toJSON(steps.smart_ci.outputs.affected_components) }}"
        shell: bash

  Docker:
    needs: Smart_CI
    runs-on: aks-linux-4-cores-16gb-docker-build
    container:
      image: openvinogithubactions.azurecr.io/docker_build:0.2
      volumes:
        - /mount:/mount
    outputs:
      images: "${{ steps.handle_docker.outputs.images && steps.handle_docker.outputs.images || steps.mock_image.outputs.images }}"
    steps:
      - name: Set mock output images if pipeline should be skipped
        if: ${{ needs.smart_ci.outputs.skip_workflow == 'True' }}
        id: mock_image
        run: echo "images={\"ov_test\":{\"ubuntu_22_04_x64\":\"mock\"},\"ov_build\":{\"ubuntu_22_04_x64\":\"mock\"},\"ov_build\":{\"ubuntu_22_04_x64_nvidia\":\"mock\"}}" >> "$GITHUB_OUTPUT"

      - name: Checkout
        if: ${{ needs.smart_ci.outputs.skip_workflow != 'True' }}
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        timeout-minutes: 15

      - uses: ./.github/actions/handle_docker
        if: ${{ needs.smart_ci.outputs.skip_workflow != 'True' }}
        id: handle_docker
        with:
          images: |
            ov_build/ubuntu_22_04_x64
            ov_build/ubuntu_22_04_x64_nvidia
            ov_test/ubuntu_22_04_x64
          registry: 'openvinogithubactions.azurecr.io'
          dockerfiles_root_dir: '.github/dockerfiles'
          changed_components: ${{ needs.smart_ci.outputs.changed_components }}

  Build:
    needs: [Docker, Smart_CI]
    if: "!needs.smart_ci.outputs.skip_workflow"
    uses: ./.github/workflows/job_build_linux.yml
    with:
      runner: 'aks-linux-16-cores-32gb'
      image: ${{ fromJSON(needs.docker.outputs.images).ov_build.ubuntu_22_04_x64 }}
      affected-components: ${{ needs.smart_ci.outputs.affected_components }}
      event-name: ${{ github.event_name }}
      os: 'ubuntu_22_04'
      build-js: true
      build-contrib: true
      build-debian-packages: true
      build-rpm-packages: false
      build-additional-python-packages: true
      target-branch: ${{ inputs.target-branch }}
      cmake-options: >-
            -G 'Ninja Multi-Config'
            -DENABLE_CPPLINT=OFF
            -DENABLE_NCC_STYLE=OFF
            -DENABLE_TESTS=ON
            -DENABLE_STRICT_DEPENDENCIES=OFF
            -DENABLE_SYSTEM_OPENCL=ON
            -DCMAKE_VERBOSE_MAKEFILE=ON
            -DCPACK_GENERATOR=TGZ
            -DENABLE_WHEEL=ON
            -DCMAKE_COMPILE_WARNING_AS_ERROR=ON
            -DENABLE_FASTER_BUILD=ON

  Debian_Packages:
    name: Debian Packages
    needs: [Docker, Build]
    uses: ./.github/workflows/job_debian_packages.yml
    with:
      runner: 'aks-linux-4-cores-16gb'
      image: 'openvinogithubactions.azurecr.io/dockerhub/ubuntu:22.04'

  Fuzzy_Tests:
    needs: [ Docker, Build, Smart_CI ]
    timeout-minutes: ${{ matrix.TEST_TYPE == 10 }}
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-16-cores-64gb
    container:
      image: ${{ fromJSON(needs.docker.outputs.images).ov_test.ubuntu_22_04_x64 }}
    strategy:
      max-parallel: 2
      fail-fast: false
    env:
      DEBIAN_FRONTEND: noninteractive # to prevent apt-get from waiting user input
      INSTALL_DIR: ${{ github.workspace }}/install
      INSTALL_TEST_DIR: ${{ github.workspace }}/install/tests
      SOURCE_COMMAND: ${{ contains(inputs.runner, 'linux') && 'source' || '.' }}
      SETUPVARS: ${{ github.workspace }}/install/${{ contains(inputs.runner, 'win') && 'setupvars.ps1' || 'setupvars.sh' }}
    steps:
      - name: Download OpenVINO artifacts (package)
        uses: akashchi/download-artifact@d59a9c15fec3fdb7c9adf09464124d00f9c11415
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Download OpenVINO artifacts (tests)
        uses: akashchi/download-artifact@d59a9c15fec3fdb7c9adf09464124d00f9c11415
        with:
          name: openvino_tests
          path: ${{ env.INSTALL_DIR }}

      - name: Install OpenVINO dependencies (mac)
        if: runner.os == 'macOS'
        run: brew install pigz

      - name: Extract OpenVINO packages (Unix)
        if: ${{ runner.os != 'Windows' }}
        run: |
          pigz -dc openvino_package.tar.gz | tar -xf - -v
          pigz -dc openvino_tests.tar.gz | tar -xf - -v
        working-directory: ${{ env.INSTALL_DIR }}

      - name: Extract OpenVINO packages (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          Expand-Archive openvino_package.zip -DestinationPath . -Verbose
          Expand-Archive openvino_tests.zip -DestinationPath . -Verbose
        working-directory: ${{ env.INSTALL_DIR }}

      #
      # Tests
      #
      - name: PaddlePaddle frontend tests
        if: ${{ fromJSON(inputs.affected-components).PDPD_FE.test && runner.os != 'Windows' }} # Ticket: 149651
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/paddle_tests --gtest_filter="PaddleFuzzyOpTest*" --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-PaddleTests.xml

  Overall_Status:
    name: ci/gha_overall_status
    needs: [Smart_CI, Build, Debian_Packages, Fuzzy_Tests]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Check status of all jobs
        if: >-
          ${{
            contains(needs.*.result, 'failure') ||
            contains(needs.*.result, 'cancelled')
          }}
        run: exit 1

name: C++ Unit Tests

on:
  workflow_call:
    inputs:
      runner:
        description: 'Machine on which the tests would run'
        type: string
        required: true
      image:
        description: 'Docker image in which the tests would run'
        type: string
        required: false
        default: null
      affected-components:
        description: 'Components that are affected by changes in the commit defined by the Smart CI Action'
        type: string
        required: true
      os:
        description: 'OS that is used for testing in the form of "ubuntu_20_04"'
        type: string
        required: true
      build-type:
        description: 'OpenVINO build type, e.g., "Release"'
        type: string
        required: false
        default: 'Release'
      timeout-minutes:
        description: 'Timeout in minutes for the job'
        type: number
        required: false
        default: 45

permissions: read-all

jobs:
  CXX_Unit_Tests:
    name: C++ unit tests
    timeout-minutes: ${{ inputs.timeout-minutes }}
    runs-on: ${{ inputs.runner }}
    container:
      image: ${{ inputs.image }}
      volumes:
        - ${{ github.workspace }}:${{ github.workspace }} # Needed as ${{ github.workspace }} is not working correctly when using Docker
    defaults:
      run:
        shell: ${{ contains(inputs.runner, 'win') && 'pwsh' || 'bash' }}
    env:
      DEBIAN_FRONTEND: noninteractive # to prevent apt-get from waiting user input
      INSTALL_DIR: ${{ github.workspace }}/install
      INSTALL_TEST_DIR: ${{ github.workspace }}/install/tests
      SOURCE_COMMAND: ${{ contains(inputs.runner, 'linux') && 'source' || '.' }}
      SETUPVARS: ${{ github.workspace }}/install/${{ contains(inputs.runner, 'win') && 'setupvars.ps1' || 'setupvars.sh' }}
    steps:
      - name: Download OpenVINO artifacts (tarballs and tests)
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          pattern: "{openvino_package,openvino_tests}"
          path: ${{ env.INSTALL_DIR }}
          merge-multiple: true

      - name: Install OpenVINO dependencies (mac)
        if: runner.os == 'macOS'
        run: brew install pigz

      - name: Extract OpenVINO packages (Unix)
        if: ${{ runner.os != 'Windows' }}
        run: |
          pigz -dc openvino_package.tar.gz | tar -xf - -v
          pigz -dc openvino_tests.tar.gz | tar -xf - -v
        working-directory: ${{ env.INSTALL_DIR }}

      - name: Extract OpenVINO packages (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          Expand-Archive openvino_package.zip -DestinationPath . -Verbose
          Expand-Archive openvino_tests.zip -DestinationPath . -Verbose
        working-directory: ${{ env.INSTALL_DIR }}

      #
      # Tests
      #

      - name: OpenVINO Core Unit Tests
        if: ${{ fromJSON(inputs.affected-components).Core.test && inputs.os != 'debian_10' }} # Ticket: 153150
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_core_unit_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU* --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-OVCoreUT.xml

      - name: OpenVINO Inference Functional Tests
        if: ${{ fromJSON(inputs.affected-components).inference.test && inputs.os != 'debian_10' }} # Ticket: 153151
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_inference_functional_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-InferenceFunc.xml

      - name: OpenVINO Inference Unit Tests
        if: fromJSON(inputs.affected-components).inference.test
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_inference_unit_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-InferenceUnit.xml

      - name: Low Precision Transformations Tests
        if: fromJSON(inputs.affected-components).LP_transformations.test
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}

          ${{ env.INSTALL_TEST_DIR }}/ov_lp_transformations_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-LpTransformations.xml

      - name: OpenVINO Conditional compilation tests
        if: fromJSON(inputs.affected-components).Core.test
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_conditional_compilation_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ConditionalCompilation.xml

      - name: IR frontend tests
        if: fromJSON(inputs.affected-components).IR_FE.test
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_ir_frontend_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-IRFrontend.xml

      - name: PaddlePaddle frontend tests
        if: ${{ fromJSON(inputs.affected-components).PDPD_FE.test && runner.os != 'Windows' }} # Ticket: 149651
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/paddle_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-PaddleTests.xml

      - name: ONNX frontend tests
        if: ${{ fromJSON(inputs.affected-components).ONNX_FE.test && runner.arch != 'ARM64' }} # Ticket for macOS ARM64: 122663, for Linux ARM64: 126280, 153161
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_onnx_frontend_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU* --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ONNXFrontend.xml

      - name: TensorFlow Common frontend tests
        if: fromJSON(inputs.affected-components).TF_FE.test ||
            fromJSON(inputs.affected-components).TFL_FE.test &&
            (runner.os != 'macOS' && runner.arch != 'ARM64')
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_tensorflow_common_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-TensorFlowCommonFrontend.xml

      - name: TensorFlow frontend tests
        if: fromJSON(inputs.affected-components).TF_FE.test
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_tensorflow_frontend_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-TensorFlowFrontend.xml

      - name: TensorFlow Lite frontend tests
        if: ${{ fromJSON(inputs.affected-components).TFL_FE.test }}
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_tensorflow_lite_frontend_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-TensorFlowLiteFrontend.xml

      - name: Transformations func tests
        if: ${{ fromJSON(inputs.affected-components).transformations.test && runner.arch != 'ARM64' }} # Ticket: 126281
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_transformations_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-Transformations.xml

      - name: Common test utils tests
        if: ${{ runner.os != 'macOS' }} # Ticket: 134469
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_util_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-CommonUtilTests.xml

      - name: Snippets func tests
        if: fromJSON(inputs.affected-components).CPU.test
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_snippets_func_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-SnippetsFuncTests.xml

      - name: CPU plugin unit tests
        if: fromJSON(inputs.affected-components).CPU.test
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_cpu_unit_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-CPUUnitTests.xml

      - name: CPU plugin unit tests (vectorized)
        if: fromJSON(inputs.affected-components).CPU.test
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_cpu_unit_tests_vectorized --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-CPUUnitTestsVectorized.xml

      - name: NPU plugin unit tests 
        if: ${{fromJSON(inputs.affected-components).NPU.test && runner.os == 'Windows'}}
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_npu_unit_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-NPUUnitTests.xml
      
      - name: ov_subgraphs_dumper_tests tests
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_subgraphs_dumper_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ov_subgraphs_dumper_tests.xml

      - name: Template OpImpl tests
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_op_conformance_tests --gtest_print_time=1 --device=TEMPLATE --gtest_filter=*OpImpl*--gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-OpImplTests.xml

      - name: AUTO unit tests
        if: fromJSON(inputs.affected-components).AUTO.test
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_auto_unit_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ov_auto_unit_tests.xml

      - name: AUTO func Tests
        if: fromJSON(inputs.affected-components).AUTO.test
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_auto_func_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ov_auto_func_tests.xml

      # Disabled for debug build due to long execution time
      - name: Template plugin func tests
        if: ${{ fromJSON(inputs.affected-components).TEMPLATE.test && inputs.build-type != 'debug' }}
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_template_func_tests --gtest_print_time=1 --gtest_filter=*smoke* --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-TemplateFuncTests.xml

      - name: OV utils unit tests
        if: ${{ runner.os != 'macOS' }} # Ticket: 134469
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_util_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ov_util_tests.xml

      - name: OpenVINO C API tests
        if: ${{ fromJSON(inputs.affected-components).C_API.test && inputs.os != 'debian_10' }} # Ticket: 153169
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_capi_test --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-OpenVINOCAPITests.xml

      - name: AutoBatch unit tests
        if: fromJSON(inputs.affected-components).AUTO_BATCH.test
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_auto_batch_unit_tests --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ov_auto_batch_unit_tests.xml
      
      # Disabled for debug build due to long execution time
      - name: AutoBatch func tests
        if: ${{ fromJSON(inputs.affected-components).AUTO_BATCH.test && inputs.build-type != 'debug' }}
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_auto_batch_func_tests --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ov_auto_batch_func_tests.xml --gtest_filter="*smoke*"

      - name: Proxy Plugin func tests
        if: fromJSON(inputs.affected-components).PROXY.test
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_proxy_plugin_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-OVProxyTests.xml

      - name: Hetero unit tests
        if: fromJSON(inputs.affected-components).HETERO.test
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_hetero_unit_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-OVHeteroUnitTests.xml

      # Disabled for debug build due to long execution time
      - name: Hetero func tests
        if: ${{ fromJSON(inputs.affected-components).HETERO.test && inputs.os != 'debian_10' && inputs.build-type != 'debug' }} # Ticket: 153170
        run: |
          ${{ env.SOURCE_COMMAND }} ${{ env.SETUPVARS }}
          ${{ env.INSTALL_TEST_DIR }}/ov_hetero_func_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-OVHeteroFuncTests.xml --gtest_filter="*smoke*" --gtest_filter=-"nightly*"

      - name: Upload Test Results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: ${{ !cancelled() }}
        with:
          name: test-results-cpp
          path: ${{ env.INSTALL_TEST_DIR }}/TEST*.xml
          if-no-files-found: 'warn'

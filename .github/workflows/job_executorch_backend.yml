name: ExecuTorch OpenVINO Backend

on:
  workflow_call:
    inputs:
      runner:
        description: 'Machine on which the tests would run'
        type: string
        required: true
      container:
        description: 'JSON to be converted to the value of the "container" configuration for the job'
        type: string
        required: false
        default: '{"image": null}'
      python-version:
        description: 'Python version to setup. E.g., "3.11"'
        type: string
        required: true

permissions: read-all

env:
  PIP_CACHE_PATH_LINUX: /mount/caches/pip/linux
  PIP_CACHE_PATH_WIN: "C:\\mount\\caches\\pip\\win"

jobs:
  ExecuTorch_OpenVINO_Backend:
    name: ExecuTorch OpenVINO Backend
    runs-on: ${{ inputs.runner }}
    timeout-minutes: 30
    defaults:
      run:
        shell: ${{ contains(inputs.runner, 'win') && 'pwsh' || 'bash' }}
    container: ${{ fromJSON(inputs.container) }}
    env:
      INSTALL_DIR: ${{ github.workspace }}/install
      INSTALL_WHEELS_DIR: ${{ github.workspace }}/install/wheels
      EXECUTORCH_REPO: ${{ github.workspace }}/executorch_repo

    steps:
      # Needed as ${{ github.workspace }} is not working correctly when using Docker
      - name: Setup Variables
        run: |
          echo "INSTALL_DIR=$GITHUB_WORKSPACE/install" >> "$GITHUB_ENV"
          echo "INSTALL_WHEELS_DIR=$GITHUB_WORKSPACE/install/wheels" >> "$GITHUB_ENV"
          echo "EXECUTORCH_REPO=$GITHUB_WORKSPACE/executorch" >> "$GITHUB_ENV"

      - name: Download OpenVINO package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Extract OpenVINO package
        run: |
          pushd ${INSTALL_DIR}
            pigz -dc openvino_package.tar.gz | tar -xf - -C ${INSTALL_DIR}
          popd

      #- name: Fetch setup_python and install wheels actions
      #  uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      #  timeout-minutes: 15
      #  with:
      #    sparse-checkout: |
      #      .github/actions/setup_python/action.yml
      #      .github/actions/install_ov_wheels/action.yml
      #    sparse-checkout-cone-mode: false
      #    path: 'openvino'

      - name: Clone ExecuTorch repository
        run: |
          #git clone -b openvino_backend https://github.com/ynimmaga/executorch.git
          git clone -b test_readme_and_example_updates https://github.com/cavusmustafa/executorch.git
          cd executorch
          git submodule update --init --recursive
          cd ..

      #- name: Download OpenVINO artifacts (wheels)
      #  uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
      #  with:
      #    pattern: openvino_[wheels|openvino_tokenizers]*
      #    path: ${{ env.INSTALL_WHEELS_DIR }}
      #    merge-multiple: true

      #- name: Setup Python ${{ inputs.python-version }}
      #  uses: ./openvino/.github/actions/setup_python
      #  with:
      #    version: ${{ inputs.python-version }}
      #    pip-cache-path: ${{ runner.os == 'Linux' && env.PIP_CACHE_PATH_LINUX || env.PIP_CACHE_PATH_WIN }}
      #    should-setup-pip-paths: ${{ runner.os != 'macOS' }}
      #    self-hosted-runner: ${{ runner.os != 'macOS' }}

      #- name: Install OpenVINO Python wheels
      #  uses: ./openvino/.github/actions/install_ov_wheels
      #  with:
      #    wheels-dir-path: ${{ env.INSTALL_WHEELS_DIR }}
      #    wheels-to-install: 'openvino openvino_tokenizers'

      - name: Build ExecuTorch and OpenVINO Example Runner
        run: |
          chown root:root /github/home
          source ${INSTALL_DIR}/setupvars.sh
          cd executorch
          ./install_requirements.sh
          ./install_executorch.sh
          cd examples/openvino
          ./openvino_build_example.sh
          cd ../..

      - name: Run tests
        run: |
          cd executorch/backends/openvino/tests
          find / -name "libtbb.so*"
          export LD_LIBRARY_PATH=/__w/openvino/openvino/install/runtime/3rdparty/tbb/lib/:$LD_LIBRARY_PATH
          python test_openvino_delegate.py --build_folder ../../../cmake-openvino-out --device CPU --test_type ops &> test_out_ops.txt
          cat test_out_ops.txt
          if ! tail -n 1 test_out_ops.txt | grep -q 'OpenVINO backend tests completed successfully'; then exit 1; fi
          python test_openvino_delegate.py --build_folder ../../../cmake-openvino-out --device CPU --test_type models &> test_out_models.txt
          cat test_out_models.txt
          if ! tail -n 1 test_out_models.txt | grep -q 'OpenVINO backend tests completed successfully'; then exit 1; fi

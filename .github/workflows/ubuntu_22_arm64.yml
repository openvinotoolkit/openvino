name: Linux (Ubuntu 22.04, ARM64 cross-compilation, Python 3.11)
on:
  workflow_dispatch:
    inputs:
      target-branch:
        description: 'Target branch for the build; taken from event context by default'
        type: string
        required: false
  pull_request:
  merge_group:
  push:
    branches:
      - master
      - 'releases/**'

concurrency:
  # github.ref is not unique in post-commit
  group: ${{ github.event_name == 'push' && github.run_id || github.ref }}-ubuntu-22-arm64-cross-compilation
  cancel-in-progress: true

permissions: read-all

env:
  PIP_CACHE_PATH: /mount/caches/pip/linux
  PYTHON_VERSION: '3.11'
  TARGET_BRANCH: ${{ inputs.target-branch || github.base_ref || github.event.merge_group.base_ref || github.ref }}

jobs:
  Smart_CI:
    runs-on: ubuntu-latest
    outputs:
      affected_components: "${{ steps.smart_ci.outputs.affected_components }}"
      changed_components: "${{ steps.smart_ci.outputs.changed_components }}"
      skip_workflow: "${{ steps.smart_ci.outputs.skip_workflow }}"
    steps:
      - name: checkout action
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        timeout-minutes: 15
        with:
          sparse-checkout: .github/actions/smart-ci

      - name: Get affected components
        id: smart_ci
        uses: ./.github/actions/smart-ci
        with:
          repository: ${{ github.repository }}
          pr: ${{ github.event.number }}
          commit_sha: ${{ github.sha }}
          ref_name: ${{ github.ref_name }}
          component_pattern: "category: (.*)"
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          skip_when_only_listed_labels_set: 'docs'
          skip_when_only_listed_files_changed: '*.md,*.rst,*.png,*.jpg,*.svg'

      - name: Show affected components
        run: |
          echo "${{ toJSON(steps.smart_ci.outputs.affected_components) }}"
        shell: bash

  Docker:
    needs: Smart_CI
    runs-on: aks-linux-4-cores-16gb-docker-build
    container:
      image: openvinogithubactions.azurecr.io/docker_build:0.2
      volumes:
        - /mount:/mount
    outputs:
      images: "${{ steps.handle_docker.outputs.images && steps.handle_docker.outputs.images || steps.mock_image.outputs.images }}"
    steps:
      - name: Set mock output images if pipeline should be skipped
        if: ${{ needs.smart_ci.outputs.skip_workflow == 'True' }}
        id: mock_image
        run: echo "images={\"ov_test\":{\"ubuntu_22_04_x64\":\"mock\"},\"ov_build\":{\"ubuntu_22_04_x64\":\"mock\"}}" >> "$GITHUB_OUTPUT"

      - name: Checkout
        if: ${{ needs.smart_ci.outputs.skip_workflow != 'True' }}
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        timeout-minutes: 15

      - uses: ./.github/actions/handle_docker
        if: ${{ needs.smart_ci.outputs.skip_workflow != 'True' }}
        id: handle_docker
        with:
          images: |
            ov_build/ubuntu_22_04_x64
            ov_test/ubuntu_22_04_x64
          registry: 'openvinogithubactions.azurecr.io'
          dockerfiles_root_dir: '.github/dockerfiles'
          changed_components: ${{ needs.smart_ci.outputs.changed_components }}

  Build:
    needs: [Docker, Smart_CI]
    if: "!needs.smart_ci.outputs.skip_workflow"
    uses: ./.github/workflows/job_build_linux.yml
    with:
      runner: 'aks-linux-16-cores-32gb'
      image: ${{ fromJSON(needs.docker.outputs.images).ov_build.ubuntu_22_04_x64 }}
      affected-components: ${{ needs.smart_ci.outputs.affected_components }}
      event-name: ${{ github.event_name }}
      os: 'ubuntu_22_04'
      arch: 'arm64-v8a'
      build-js: true
      build-contrib: true
      build-debian-packages: true
      build-rpm-packages: false
      build-additional-python-packages: true
      target-branch: ${{ inputs.target-branch }}
      cmake-options: >-
            -G 'Ninja Multi-Config'
            -DENABLE_CPPLINT=OFF
            -DOV_CPU_ARM_TARGET_ARCH=arm64-v8a
            -DTHREADS_PTHREAD_ARG=-pthread
            -DCMAKE_TOOLCHAIN_FILE=cmake/arm64.toolchain.cmake
            -DENABLE_NCC_STYLE=OFF
            -DENABLE_TESTS=ON
            -DENABLE_STRICT_DEPENDENCIES=OFF
            -DENABLE_SYSTEM_OPENCL=ON
            -DCMAKE_VERBOSE_MAKEFILE=ON
            -DCPACK_GENERATOR=TGZ
            -DENABLE_WHEEL=ON
            -DCMAKE_COMPILE_WARNING_AS_ERROR=ON
            -DENABLE_FASTER_BUILD=ON

#   Debian_Packages:
#     name: Debian Packages
#     needs: [Docker, Build]
#     uses: ./.github/workflows/job_debian_packages.yml
#     with:
#       runner: 'aks-linux-4-cores-16gb'
#       image: 'openvinogithubactions.azurecr.io/dockerhub/ubuntu:22.04'

#   Samples:
#     needs: [ Docker, Build, Smart_CI ]
#     if: fromJSON(needs.smart_ci.outputs.affected_components).samples
#     uses: ./.github/workflows/job_samples_tests.yml
#     with:
#       runner: 'aks-linux-4-cores-16gb'
#       image: ${{ fromJSON(needs.docker.outputs.images).ov_test.ubuntu_22_04_x64 }}
#       affected-components: ${{ needs.smart_ci.outputs.affected_components }}

#   JS_API:
#     name: OpenVINO JS API
#     needs: [ Docker, Build, Smart_CI ]
#     if: fromJSON(needs.smart_ci.outputs.affected_components).JS_API
#     uses: ./.github/workflows/job_openvino_js.yml
#     with:
#       runner: 'aks-linux-4-cores-16gb'
#       image: ${{ fromJSON(needs.docker.outputs.images).ov_build.ubuntu_22_04_x64 }}

#   ONNX_Models:
#     name: ONNX Models Tests
#     if: fromJSON(needs.smart_ci.outputs.affected_components).Python_API.test ||
#         fromJSON(needs.smart_ci.outputs.affected_components).ONNX_FE.test
#     needs: [ Docker, Build, Smart_CI ]
#     uses: ./.github/workflows/job_onnx_models_tests.yml
#     with:
#       runner: 'aks-linux-16-cores-64gb'
#       image: ${{ fromJSON(needs.docker.outputs.images).ov_test.ubuntu_22_04_x64 }}

#   CXX_Unit_Tests:
#     name: C++ unit tests
#     needs: [ Docker, Build, Smart_CI ]
#     uses: ./.github/workflows/job_cxx_unit_tests.yml
#     with:
#       runner: 'aks-linux-4-cores-16gb'
#       image: ${{ fromJSON(needs.docker.outputs.images).ov_test.ubuntu_22_04_x64 }}
#       affected-components: ${{ needs.smart_ci.outputs.affected_components }}
#       os: 'ubuntu_22_04'

#   Python_Unit_Tests:
#     name: Python unit tests
#     needs: [ Docker, Build, Smart_CI ]
#     uses: ./.github/workflows/job_python_unit_tests.yml
#     with:
#       runner: 'aks-linux-4-cores-16gb'
#       image: ${{ fromJSON(needs.docker.outputs.images).ov_test.ubuntu_22_04_x64 }}
#       affected-components: ${{ needs.smart_ci.outputs.affected_components }}
#       python-version: '3.11'

#   Python_API_Tests:
#     name: Python API tests
#     needs: [ Docker, Build, Smart_CI ]
#     uses: ./.github/workflows/job_python_api_tests.yml
#     with:
#       runner: 'aks-linux-4-cores-16gb'
#       image: ${{ fromJSON(needs.docker.outputs.images).ov_test.ubuntu_22_04_x64 }}
#       affected-components: ${{ needs.smart_ci.outputs.affected_components }}
#       python-version: '3.11'

#   TensorFlow_Layer_Tests:
#     name: TensorFlow Layer Tests
#     needs: [ Docker, Build, Smart_CI, Openvino_tokenizers ]
#     uses: ./.github/workflows/job_tensorflow_layer_tests.yml
#     with:
#       runner: 'aks-linux-4-cores-16gb'
#       image: ${{ fromJSON(needs.docker.outputs.images).ov_test.ubuntu_22_04_x64 }}
#       affected-components: ${{ needs.smart_ci.outputs.affected_components }}
#       python-version: '3.11'

#   Pytorch_Layer_Tests:
#     name: Pytorch Layer Tests
#     needs: [ Docker, Build, Smart_CI ]
#     uses: ./.github/workflows/job_pytorch_layer_tests.yml
#     with:
#       runner: 'aks-linux-4-cores-16gb'
#       image: ${{ fromJSON(needs.docker.outputs.images).ov_test.ubuntu_22_04_x64 }}
#       affected-components: ${{ needs.smart_ci.outputs.affected_components }}
#       python-version: '3.11'

#   Pytorch_FX_Layer_Tests:
#     name: Pytorch FX Layer Tests
#     needs: [ Docker, Build, Smart_CI ]
#     uses: ./.github/workflows/job_pytorch_fx_layer_tests.yml
#     with:
#       runner: 'aks-linux-4-cores-16gb'
#       image: ${{ fromJSON(needs.docker.outputs.images).ov_test.ubuntu_22_04_x64 }}
#       affected-components: ${{ needs.smart_ci.outputs.affected_components }}
#       python-version: '3.11'

#   JAX_Layer_Tests:
#     name: JAX Layer Tests
#     needs: [ Docker, Build, Smart_CI ]
#     uses: ./.github/workflows/job_jax_layer_tests.yml
#     with:
#       runner: 'aks-linux-4-cores-16gb'
#       image: ${{ fromJSON(needs.docker.outputs.images).ov_test.ubuntu_22_04_x64 }}
#       affected-components: ${{ needs.smart_ci.outputs.affected_components }}
#       python-version: '3.11'

#   Keras3_OpenVINO_Backend:
#     name: Keras 3 OpenVINO Backend Tests
#     if: fromJSON(needs.smart_ci.outputs.affected_components).Python_API.test
#     needs: [ Docker, Build, Smart_CI, Openvino_tokenizers ]
#     uses: ./.github/workflows/job_keras3_backend.yml
#     with:
#       runner: 'aks-linux-4-cores-16gb'
#       image: ${{ fromJSON(needs.docker.outputs.images).ov_test.ubuntu_22_04_x64 }}
#       python-version: '3.11'

#   CPU_Functional_Tests:
#     name: CPU functional tests
#     if: fromJSON(needs.smart_ci.outputs.affected_components).CPU.test
#     needs: [ Docker, Build, Smart_CI ]
#     uses: ./.github/workflows/job_cpu_functional_tests.yml
#     with:
#       runner: 'aks-linux-8-cores-32gb'
#       image: ${{ fromJSON(needs.docker.outputs.images).ov_test.ubuntu_22_04_x64 }}
#       python-version: '3.11'
#       scope: ${{ contains(fromJSON('["schedule", "workflow_dispatch"]'), github.event_name)  && 'nightly' || 'smoke' }}

#   TensorFlow_Models_Tests_Precommit:
#     name: TensorFlow Models tests
#     if: fromJSON(needs.smart_ci.outputs.affected_components).TF_FE.test ||
#         fromJSON(needs.smart_ci.outputs.affected_components).TFL_FE.test
#     needs: [ Docker, Build, Smart_CI, Openvino_tokenizers ]
#     uses: ./.github/workflows/job_tensorflow_models_tests.yml
#     with:
#       runner: 'aks-linux-8-cores-16gb'
#       model_scope: 'precommit'
#       image: ${{ fromJSON(needs.docker.outputs.images).ov_test.ubuntu_22_04_x64 }}

#   TensorFlow_Models_Tests_Nightly_TF_HUB:
#     name: TensorFlow TF Hub Models tests
#     if: ${{ github.event_name == 'schedule' }}
#     needs: [ Docker, Build, Smart_CI, Openvino_tokenizers ]
#     uses: ./.github/workflows/job_tensorflow_models_tests.yml
#     with:
#       runner: 'aks-linux-8-cores-64gb'
#       model_scope: 'nightly_tf_hub'
#       image: ${{ fromJSON(needs.docker.outputs.images).ov_test.ubuntu_22_04_x64 }}

#   TensorFlow_Models_Tests_Nightly_HF:
#     name: TensorFlow Hugging Face Models tests
#     if: ${{ github.event_name == 'schedule' }}
#     needs: [ Docker, Build, Smart_CI, Openvino_tokenizers ]
#     uses: ./.github/workflows/job_tensorflow_models_tests.yml
#     with:
#       runner: 'aks-linux-8-cores-64gb'
#       model_scope: 'nightly_hf'
#       image: ${{ fromJSON(needs.docker.outputs.images).ov_test.ubuntu_22_04_x64 }}

#   PyTorch_Models_Tests:
#     name: PyTorch Models tests
#     if: ${{ github.event_name != 'schedule' && fromJSON(needs.smart_ci.outputs.affected_components).PyTorch_FE.test }}
#     needs: [ Docker, Build, Smart_CI, Openvino_tokenizers ]
#     uses: ./.github/workflows/job_pytorch_models_tests.yml
#     with:
#       runner: 'aks-linux-8-cores-64gb'
#       model_scope: 'precommit'
#       image: ${{ fromJSON(needs.docker.outputs.images).ov_test.ubuntu_22_04_x64 }}

#   PyTorch_Models_Tests_Nightly_Scope1:
#     name: PyTorch Models Nightly Scope1 tests
#     if: ${{ github.event_name == 'schedule' }}
#     needs: [ Docker, Build, Smart_CI, Openvino_tokenizers ]
#     uses: ./.github/workflows/job_pytorch_models_tests.yml
#     with:
#       runner: 'aks-linux-16-cores-64gb'
#       model_scope: 'nightly_scope1'
#       image: ${{ fromJSON(needs.docker.outputs.images).ov_test.ubuntu_22_04_x64 }}

#   PyTorch_Models_Tests_Nightly_Scope2:
#     name: PyTorch Models Nightly Scope2 tests
#     if: ${{ github.event_name == 'schedule' }}
#     needs: [ Docker, Build, Smart_CI, Openvino_tokenizers ]
#     uses: ./.github/workflows/job_pytorch_models_tests.yml
#     with:
#       runner: 'aks-linux-16-cores-64gb'
#       model_scope: 'nightly_scope2'
#       image: ${{ fromJSON(needs.docker.outputs.images).ov_test.ubuntu_22_04_x64 }}

#   JAX_Models_Tests_Precommit:
#     name: JAX/Flax Models tests
#     if: fromJSON(needs.smart_ci.outputs.affected_components).JAX_FE.test
#     needs: [ Docker, Build, Smart_CI, Openvino_tokenizers ]
#     uses: ./.github/workflows/job_jax_models_tests.yml
#     with:
#       runner: 'aks-linux-8-cores-16gb'
#       model_scope: 'precommit'
#       image: ${{ fromJSON(needs.docker.outputs.images).ov_test.ubuntu_22_04_x64 }}

#   Openvino_tokenizers:
#     name: OpenVINO tokenizers extension
#     needs: [ Build, Smart_CI, Docker ]
#     uses: ./.github/workflows/job_tokenizers.yml
#     with:
#       runner: 'aks-linux-4-cores-16gb'
#       shell: bash
#       image: ${{ fromJSON(needs.docker.outputs.images).ov_build.ubuntu_22_04_x64 }}
#       affected-components: ${{ needs.smart_ci.outputs.affected_components }}
#       python-version: '3.11'
#       target-branch: ${{ inputs.target-branch }}
#     if: fromJSON(needs.smart_ci.outputs.affected_components).TOKENIZERS

  Overall_Status:
    name: ci/gha_overall_status_ubuntu_22_arm64_cross_compilation
    needs: [Smart_CI, Build]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Check status of all jobs
        if: >-
          ${{
            contains(needs.*.result, 'failure') ||
            contains(needs.*.result, 'cancelled')
          }}
        run: exit 1

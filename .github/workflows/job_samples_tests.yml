name: Samples

on:
  workflow_call:
    inputs:
      runner:
        description: 'Machine on which the tests would run'
        type: string
        required: true
      container:
        description: 'JSON to be converted to the value of the "container" configuration for the job'
        type: string
        required: false
        default: '{"image": null}'
      affected-components:
        description: 'Components that are affected by changes in the commit defined by the Smart CI Action'
        type: string
        required: true

permissions: read-all

jobs:
  Samples:
    timeout-minutes: 30
    runs-on: ${{ inputs.runner }}
    container: ${{ fromJSON(inputs.container) }}
    defaults:
      run:
        shell: bash
    env:
      DEBIAN_FRONTEND: noninteractive # to prevent apt-get from waiting user input
      INSTALL_DIR: ${{ github.workspace }}/install
      INSTALL_TEST_DIR: ${{ github.workspace }}/install/tests
      INSTALL_WHEELS_DIR: ${{ github.workspace }}/install/wheels
      BUILD_DIR: ${{ github.workspace }}/build
    steps:
      - name: Download OpenVINO artifacts (tarballs) 
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          pattern: openvino_[package|tests]*
          path: ${{ env.INSTALL_DIR }}
          merge-multiple: true

      - name: Download OpenVINO artifacts (wheels) 
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          pattern: openvino_[wheels]*
          path: ${{ env.INSTALL_WHEELS_DIR }}
          merge-multiple: true          
            
      # Needed as ${{ github.workspace }} is not working correctly when using Docker
      - name: Setup Variables
        run: |
          echo "INSTALL_DIR=$GITHUB_WORKSPACE/install" >> "$GITHUB_ENV"
          echo "INSTALL_TEST_DIR=$GITHUB_WORKSPACE/install/tests" >> "$GITHUB_ENV"
          echo "BUILD_DIR=$GITHUB_WORKSPACE/build" >> "$GITHUB_ENV"
      
      - name: Install OpenVINO dependencies (mac)
        if: runner.os == 'macOS'
        run: brew install coreutils pigz

      - name: Extract OpenVINO packages and tests
        run: |
            pigz -dc openvino_package.tar.gz | tar -xf - -C ${INSTALL_DIR}
            pigz -dc openvino_tests.tar.gz | tar -xf - -C ${INSTALL_DIR}
        working-directory: ${{ env.INSTALL_DIR }}

      - name: Fetch setup_python action
        # Python is already installed on Ubuntu within Dockerfile
        if: runner.os != 'Linux'
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          sparse-checkout: |
            .github/actions/setup_python/action.yml
          sparse-checkout-cone-mode: false
          path: 'openvino'

      - name: Setup Python 3.11
        # Python is already installed on Ubuntu within Dockerfile
        if: runner.os != 'Linux'
        uses: ./openvino/.github/actions/setup_python
        with:
          version: '3.11'
          should-setup-pip-paths: 'false'

      - name: Configure Developer Command Prompt for Microsoft Visual C++ (2022)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0
        with:
          toolset: 14.40

      - name: Build cpp samples
        run: $INSTALL_DIR/samples/cpp/build_samples.sh -i $INSTALL_DIR -b $BUILD_DIR/cpp_samples
        env:
          CMAKE_COMPILE_WARNING_AS_ERROR: 'ON'

      - name: Build cpp samples - Clang
        if: runner.os == 'Linux'
        run: |
          apt-get update && apt-get install -y clang
          $INSTALL_DIR/samples/cpp/build_samples.sh -i $INSTALL_DIR -b $BUILD_DIR/cpp_samples_clang
        env:
          CMAKE_COMPILE_WARNING_AS_ERROR: 'ON'
          CC: clang
          CXX: clang++

      - name: Build c samples
        run: $INSTALL_DIR/samples/c/build_samples.sh -i $INSTALL_DIR -b $BUILD_DIR/c_samples
        env:
          CMAKE_COMPILE_WARNING_AS_ERROR: 'ON'

      #
      # Tests
      #

      - name: Samples tests
        if: fromJSON(inputs.affected-components).samples.test
        run: |
          export WORKSPACE=$INSTALL_DIR
          export IE_APP_PATH=$INSTALL_DIR/samples_bin
          export IE_APP_PYTHON_PATH=$INSTALL_DIR/samples/python
          export SHARE=$INSTALL_TEST_DIR/smoke_tests/samples_smoke_tests_data

          # Install Python benchmark_app by installing openvino-*.whl
          python3 -m pip install --ignore-installed PyYAML -r $INSTALL_TEST_DIR/smoke_tests/requirements.txt $INSTALL_WHEELS_DIR/openvino-*.whl
          export LD_LIBRARY_PATH=${IE_APP_PATH}:$LD_LIBRARY_PATH

          source ${INSTALL_DIR}/setupvars.sh

          PYTHONCOERCECLOCALE=warn python3 -bb -W error -X dev -m pytest $INSTALL_TEST_DIR/smoke_tests

on:
  workflow_call:
    inputs:
      runner:
        description: 'Machine on which the tests would run'
        type: string
        required: true
      container:
        description: 'JSON to be converted to the value of the "container" configuration for the job'
        type: string
        required: false
        default: '{"image": null}'
      affected-components:
        description: 'Components that are affected by changes in the commit defined by the Smart CI Action'
        type: string
        required: true
      event-name:
        description: 'Name of the event that triggered the workflow'
        type: string
        required: false
      os:
        description: 'OS that is used for building in the form of "ubuntu_20_04"'
        type: string
        required: true
      arch:
        description: 'Target architecture'
        type: string
        default: 'x86_64'
        required: false
      cmake-options:
        description: 'A string of options passed to CMake'
        type: string
        required: true
      build-js:
        description: 'Whether to build OpenVINO JS Bindings'
        type: boolean
        required: false
        default: false
      build-debian-packages:
        description: 'Whether to build Debian packages'
        type: boolean
        required: false
        default: false
      build-contrib:
        description: 'Whether to build OpenVINO Contrib'
        type: boolean
        required: false
        default: false
      build-rpm-packages:
        description: 'Whether to build RPM Packages'
        type: boolean
        required: false
        default: false
      build-additional-python-packages:
        description: 'Whether to build additional, i.e., non-system Python packages. Should have Python 3.9-3.13 installed'
        type: boolean
        required: false
        default: false

permissions: read-all

env:
  PIP_CACHE_PATH: /mount/caches/pip/linux
  TARGET_BRANCH: ${{ github.base_ref || github.event.merge_group.base_ref || github.ref }}

jobs:
  Build:
    name: Build
    timeout-minutes: 150
    runs-on: ${{ inputs.runner }}
    container: ${{ fromJSON(inputs.container) }}
    defaults:
      run:
        shell: bash
    env:
      DEBIAN_FRONTEND: noninteractive # to prevent apt-get from waiting user input
      CMAKE_BUILD_TYPE: 'Release'
      CMAKE_CXX_COMPILER_LAUNCHER: sccache
      CMAKE_C_COMPILER_LAUNCHER: sccache
      SCCACHE_IGNORE_SERVER_IO_ERROR: 1
      SCCACHE_SERVER_PORT: 35555
      SCCACHE_ERROR_LOG: /__w/openvino/sccache_log.txt
      SCCACHE_LOG: warn
      GITHUB_WORKSPACE: /__w/openvino/openvino
      OPENVINO_REPO: /__w/openvino/openvino/openvino
      OPENVINO_CONTRIB_REPO: /__w/openvino/openvino/openvino_contrib
      INSTALL_DIR: /__w/openvino/openvino/openvino_install
      INSTALL_DIR_JS: /__w/openvino/openvino/openvino_install/js
      INSTALL_TEST_DIR: /__w/openvino/openvino/tests_install
      INSTALL_WHEELS_DIR: /__w/openvino/openvino/install/wheels
      DEVELOPER_PACKAGE_DIR: /__w/openvino/openvino/developer_package_install
      BUILD_DIR: /__w/openvino/openvino/openvino_build
      SCCACHE_AZURE_KEY_PREFIX: ${{ inputs.os }}_${{ inputs.arch }}_Release
      ARTIFACTS_SHARE: "/mount/build-artifacts"
      MANIFEST_PATH: '/__w/openvino/openvino/manifest.yml'
      PRODUCT_TYPE: public_linux_${{ inputs.os }}_${{ inputs.arch }}_release
    steps:
      - name: Clone OpenVINO (with trace)
        if: ${{ inputs.os == 'fedora_29' }} # to debug ticket 160901
        env:
          GIT_TRACE: 1
          GIT_TRACE_PERFORMANCE: 1
          GIT_CURL_VERBOSE: 1
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        timeout-minutes: 15
        with:
          path: ${{ env.OPENVINO_REPO }}
          submodules: 'true'

      - name: Clone OpenVINO
        if: ${{ inputs.os != 'fedora_29' }}
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        timeout-minutes: 15
        with:
          path: ${{ env.OPENVINO_REPO }}
          submodules: 'true'

      # Ticket: 139627
      - name: Checkout the latest OneDNN for GPU in nightly
        if: ${{ inputs.event-name == 'schedule' && inputs.os == 'ubuntu_20_04' }} # GPU tests are enabled only on U20
        working-directory: ${{ env.OPENVINO_REPO }}/src/plugins/intel_gpu/thirdparty/onednn_gpu
        run: |
          git fetch origin
          git checkout main
          git rev-parse HEAD

      - name: Clone OpenVINO Contrib
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        timeout-minutes: 15
        with:
          repository: 'openvinotoolkit/openvino_contrib'
          path: ${{ env.OPENVINO_CONTRIB_REPO }}
          submodules: 'true'
          ref: ${{ env.TARGET_BRANCH }}

      - name: Generate product manifest and set CI_BUILD_NUMBER & CI_BUILD_DEV_TAG
        id: create_manifest
        uses: ./openvino/.github/actions/create_manifest
        with:
          repos: |
            ${{ env.OPENVINO_REPO }}
            ${{ env.OPENVINO_CONTRIB_REPO }}
          product_type: ${{ env.PRODUCT_TYPE }}
          target_arch: ${{ inputs.arch }}
          build_type: 'release'
          save_to: ${{ env.MANIFEST_PATH }}

      #
      # Print system info
      #

      - name: System info
        uses: ./openvino/.github/actions/system_info

      #
      # Dependencies
      #

      - name: Install python dependencies
        run: |
          # For Python API: build and wheel packaging
          python3 -m pip install -r ${OPENVINO_REPO}/src/bindings/python/wheel/requirements-dev.txt

          # For running ONNX frontend unit tests
          python3 -m pip install -r ${OPENVINO_REPO}/src/frontends/onnx/tests/requirements.txt

          # For running TensorFlow frontend unit tests
          python3 -m pip install -r ${OPENVINO_REPO}/src/frontends/tensorflow/tests/requirements.txt

          # For running TensorFlow Lite frontend unit tests
          python3 -m pip install -r ${OPENVINO_REPO}/src/frontends/tensorflow_lite/tests/requirements.txt

          # For running Paddle frontend unit tests
          python3 -m pip install -r ${OPENVINO_REPO}/src/frontends/paddle/tests/requirements.txt

      #
      # Build
      #

      - name: CMake configure - OpenVINO
        run: eval cmake $CMAKE_OPTIONS -S ${OPENVINO_REPO} -B ${BUILD_DIR}
        env:
          CMAKE_OPTIONS: ${{ inputs.cmake-options }}

      - name: Clean sccache stats
        run: ${SCCACHE_PATH} --zero-stats

      - name: Cmake build - OpenVINO
        run: cmake --build ${BUILD_DIR} --parallel $(nproc) --config ${{ env.CMAKE_BUILD_TYPE }}

      - name: Show sccache stats
        run: ${SCCACHE_PATH} --show-stats

      - name: Cmake install - OpenVINO
        run: |
          cmake --install ${BUILD_DIR} --config ${{ env.CMAKE_BUILD_TYPE }} --prefix ${INSTALL_DIR}
          cmake --install ${BUILD_DIR} --config ${{ env.CMAKE_BUILD_TYPE }} --prefix ${INSTALL_TEST_DIR} --component tests
          cmake --install ${BUILD_DIR} --config ${{ env.CMAKE_BUILD_TYPE }} --prefix ${DEVELOPER_PACKAGE_DIR} --component developer_package

      - name: Install Python wheels for the main Python
        if: ${{ ! inputs.build-additional-python-packages }}
        run: cmake --install ${BUILD_DIR} --config ${{ env.CMAKE_BUILD_TYPE }} --prefix ${INSTALL_WHEELS_DIR} --component python_wheels

      - name: Build Python API and wheels
        if: ${{ inputs.build-additional-python-packages }}
        run: |
          for py_version in "3.9" "3.10" "3.11" "3.12" "3.13"
          do
            export PY_BUILD_DIR=${{ github.workspace }}/py$py_version
            mkdir -p $PY_BUILD_DIR
          
            python_exec_path=$(python$py_version -c "import sys; print(sys.executable)")
          
            $python_exec_path -m pip install -r ${OPENVINO_REPO}/src/bindings/python/wheel/requirements-dev.txt
            
            CMAKE_OPTIONS="-DPython3_EXECUTABLE=$python_exec_path -DENABLE_PYTHON=ON -DENABLE_WHEEL=ON -DOpenVINODeveloperPackage_DIR=${BUILD_DIR}"
            if [[ "${OS}" == 'debian_10' ]]; then
              echo "Adding ARM specific CMake options"
              CMAKE_OPTIONS+=" -DCMAKE_TOOLCHAIN_FILE=/__w/openvino/openvino/openvino/cmake/arm.toolchain.cmake -DPYTHON_MODULE_EXTENSION=$(/opt/python${py_version}_arm/bin/python${py_version}-config --extension-suffix) -DPython3_INCLUDE_DIR=/opt/python${py_version}_arm/include/python${py_version}"
            fi
            
            cmake ${CMAKE_OPTIONS} -S ${OPENVINO_REPO}/src/bindings/python -B ${PY_BUILD_DIR}
            cmake --build ${PY_BUILD_DIR} --parallel $(nproc)
            cmake --install ${PY_BUILD_DIR} --config ${{ env.CMAKE_BUILD_TYPE }} --prefix ${INSTALL_DIR} --component pyopenvino_python$py_version
            cmake --install ${PY_BUILD_DIR} --config ${{ env.CMAKE_BUILD_TYPE }} --prefix ${INSTALL_WHEELS_DIR} --component python_wheels
          done
        env:
          OS: ${{ inputs.os }}

      - name: Pack openvino_package
        run: tar -cvf - * | pigz > ${BUILD_DIR}/openvino_package.tar.gz
        working-directory: ${{ env.INSTALL_DIR }}

      - name: Pack openvino_developer_package
        run: tar -cvf - * | pigz > ${BUILD_DIR}/developer_package.tar.gz
        working-directory: ${{ env.DEVELOPER_PACKAGE_DIR }}/developer_package

      - name: Pack openvino_tests
        run: tar -cvf - * | pigz > ${BUILD_DIR}/openvino_tests.tar.gz
        working-directory: ${{ env.INSTALL_TEST_DIR }}

      - name: Build Debian packages
        if: ${{ inputs.build-debian-packages }}
        env:
          OS: ${{ inputs.os }}
        run: |
          # Ubuntu 24 does not allow using the system Python directly so
          # we have to use Python from the virtual environment created in Docker
          [[ "${OS}" == "ubuntu_24_04" ]] && python_exec=/venv/bin/python3 || python_exec=/usr/bin/python3
          $python_exec -m pip install -U pip
          $python_exec -m pip install -r ${OPENVINO_REPO}/src/bindings/python/wheel/requirements-dev.txt
          cmake -UPython* -U_Python* -UPYTHON* \
                -UTBB* \
                -DENABLE_SYSTEM_TBB=ON \
                -DENABLE_PYTHON_PACKAGING=ON \
                -DENABLE_WHEEL=OFF \
                -DENABLE_TESTS=OFF \
                -DPython3_EXECUTABLE=$python_exec \
                -DCPACK_GENERATOR=DEB \
                ${BUILD_DIR}
          cmake --build ${BUILD_DIR} --parallel $(nproc) --config ${{ env.CMAKE_BUILD_TYPE }} --target package

      - name: Cmake & Build - OpenVINO Contrib
        if: ${{ inputs.build-contrib }}
        run: |
          cmake \
            -DCUSTOM_OPERATIONS="calculate_grid;complex_mul;fft;grid_sample;sparse_conv;sparse_conv_transpose" \
            -DOPENVINO_EXTRA_MODULES="${OPENVINO_CONTRIB_REPO}/modules/java_api;${OPENVINO_CONTRIB_REPO}/modules/custom_operations" \
            -DENABLE_WHEEL=OFF \
            -S ${OPENVINO_REPO} \
            -B ${BUILD_DIR}
          cmake --build ${BUILD_DIR} --parallel $(nproc) --config ${{ env.CMAKE_BUILD_TYPE }}

      - name: CMake configure, build and install - OpenVINO JS API
        if: ${{ fromJSON(inputs.affected-components).JS_API && inputs.build-js }}
        run: |
          cmake -UTBB* -S ${OPENVINO_REPO} -B ${BUILD_DIR} \
                -DCPACK_GENERATOR=NPM \
                -DENABLE_SYSTEM_TBB=OFF \
                -DENABLE_WHEEL=OFF
          cmake --build ${BUILD_DIR} --parallel $(nproc)
          cmake --install ${BUILD_DIR} --prefix ${INSTALL_DIR_JS}

      - name: Pack openvino_js_package
        if: ${{ fromJSON(inputs.affected-components).JS_API && inputs.build-js }}
        run: tar -cvf - * | pigz > ${BUILD_DIR}/openvino_js_package.tar.gz
        working-directory: ${{ env.INSTALL_DIR_JS }}

      - name: Build RPM packages
        if: ${{ inputs.build-rpm-packages }}
        run: |
          cmake -UTBB* \
                -DCPACK_GENERATOR=RPM \
                -DENABLE_SYSTEM_TBB=ON \
                -DENABLE_PYTHON_PACKAGING=ON \
                -DENABLE_WHEEL=OFF \
                -DENABLE_TESTS=OFF \
                ${BUILD_DIR}
          cmake --build ${BUILD_DIR} --parallel $(nproc) --target package --verbose

      #
      # Upload build artifacts and logs
      #
      - name: Upload build logs
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        if: always()
        with:
          name: build_logs
          path: ${{ env.SCCACHE_ERROR_LOG }}
          if-no-files-found: 'ignore'

      - name: Upload OpenVINO package
        if: ${{ always() }}
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: openvino_package
          path: ${{ env.BUILD_DIR }}/openvino_package.tar.gz
          if-no-files-found: 'error'

      - name: Upload OpenVINO wheels
        if: ${{ inputs.os != 'debian_10' && inputs.arch != 'arm' }}
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: openvino_wheels
          path: ${{ env.INSTALL_WHEELS_DIR }}/wheels/*.whl
          if-no-files-found: 'error'

      - name: Upload OpenVINO js package
        if: ${{ fromJSON(inputs.affected-components).JS_API && inputs.build-js }}
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: openvino_js_package
          path: ${{ env.BUILD_DIR }}/openvino_js_package.tar.gz
          if-no-files-found: 'error'

      - name: Upload OpenVINO developer package
        if: ${{ always() }}
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: openvino_developer_package
          path: ${{ env.BUILD_DIR }}/developer_package.tar.gz
          if-no-files-found: 'error'

      - name: Upload OpenVINO RPM packages
        if: ${{ inputs.build-rpm-packages }}
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: openvino_rpm_packages
          path: ${{ env.BUILD_DIR }}/*.rpm
          if-no-files-found: 'error'

      - name: Upload OpenVINO debian packages
        if: ${{ inputs.build-debian-packages }}
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: openvino_debian_packages
          path: ${{ env.BUILD_DIR }}/*.deb
          if-no-files-found: 'error'

      - name: Upload OpenVINO tests package
        if: ${{ always() }}
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: openvino_tests
          path: ${{ env.BUILD_DIR }}/openvino_tests.tar.gz
          if-no-files-found: 'error'

      - name: Prepare debian packages for storage on share
        if: ${{ always() }}
        continue-on-error: true
        run: |
          pushd ${{ env.BUILD_DIR }}
          mkdir deb && mv *.deb deb/
          popd

      - name: Store artifacts to a shared drive
        id: store_artifacts
        if: ${{ always() }}
        uses: ./openvino/.github/actions/store_artifacts
        with:
          artifacts: |
            ${{ env.BUILD_DIR }}/openvino_package.tar.gz
            ${{ env.BUILD_DIR }}/developer_package.tar.gz
            ${{ env.BUILD_DIR }}/openvino_tests.tar.gz
            ${{ env.BUILD_DIR }}/deb
            ${{ env.MANIFEST_PATH }}
            ${{ env.STORE_JS == 'true' && format('{0}/openvino_js_package.tar.gz', env.BUILD_DIR) || '' }}
            ${{ env.STORE_WHEELS == 'true' && format('{0}/wheels', env.INSTALL_WHEELS_DIR) || '' }}
          storage_dir: ${{ env.PRODUCT_TYPE }}
          storage_root: ${{ env.ARTIFACTS_SHARE }}
        env:
          STORE_WHEELS: ${{ inputs.os != 'debian_10' && inputs.arch != 'arm' }}
          STORE_JS: ${{ fromJSON(inputs.affected-components).JS_API && inputs.build-js }}

name: Debian Packages

on:
  workflow_call:
    inputs:
      runner:
        description: 'Machine on which the tests would run'
        type: string
        required: true
      image:
        description: 'Docker image in which the tests would run'
        type: string
        required: false
        default: null

permissions: read-all

jobs:
  Debian_Packages:
    name: Debian Packages
    runs-on: ${{ inputs.runner }}
    container:
      image: ${{ inputs.image }}
    defaults:
      run:
        shell: bash
    env:
      DEBIAN_FRONTEND: noninteractive # to prevent apt-get from waiting user input
      DEBIAN_PACKAGES_DIR: ${{ github.workspace }}/packages
    steps:
      - name: Set apt retries
        if: runner.os == 'Linux'
        run: echo 'Acquire::Retries "10";' > /etc/apt/apt.conf.d/80-retries

      - name: Download OpenVINO debian packages
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: openvino_debian_packages
          path: ${{ env.DEBIAN_PACKAGES_DIR }}

      # Needed as ${{ github.workspace }} is not working correctly when using Docker
      - name: Setup Variables
        run: echo "DEBIAN_PACKAGES_DIR=$GITHUB_WORKSPACE/packages" >> "$GITHUB_ENV"

      - name: Install debian packages & check conflicts
        run: |
          apt-get update -y

          if [[ "${{ runner.arch }}" == "X64" ]]; then
            # Install debian packages from previous release
            apt-get install --no-install-recommends -y gnupg wget ca-certificates lsb-release
            wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
            gpg --output /etc/apt/trusted.gpg.d/intel.gpg --dearmor GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB

            # Yields only the number, e.g., "20"
            ubuntu_version=$(lsb_release -r -s)
            ubuntu_version=${ubuntu_version%.*}

            echo "deb https://apt.repos.intel.com/openvino/2024 ubuntu$ubuntu_version main" | tee /etc/apt/sources.list.d/intel-openvino-2024.list

            apt-get update -y
            apt-get install -y openvino
          fi

          # install our local one and make sure the conflicts are resolved
          apt-get install --no-install-recommends -y dpkg-dev
          dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz
          echo "deb [trusted=yes] file:${DEBIAN_PACKAGES_DIR} ./" | tee /etc/apt/sources.list.d/openvino-local.list
          apt-get update -y
          apt-get install openvino -y
        working-directory: ${{ env.DEBIAN_PACKAGES_DIR }}

      - name: Test debian packages
        run: |
          /usr/share/openvino/samples/cpp/build_samples.sh
          /usr/share/openvino/samples/c/build_samples.sh

          [[ "${{ runner.arch }}" == "X64" ]] && path_by_arch="intel64" || path_by_arch="aarch64"
          ~/openvino_cpp_samples_build/$path_by_arch/Release/hello_query_device

          # check integrity of OpenVINO Python API installation
          apt-get install python3-pip -y
          python3 -m pip check

          python3 /usr/share/openvino/samples/python/hello_query_device/hello_query_device.py
          python3 -c 'from openvino import Core; Core().get_property("CPU", "AVAILABLE_DEVICES")'

          if [[ "${{ runner.arch }}" == "X64" ]]; then
            python3 -c 'from openvino import Core; Core().get_property("GPU", "AVAILABLE_DEVICES")'
          fi

          python3 -c 'from openvino import Core; Core().get_property("AUTO", "SUPPORTED_PROPERTIES")'
          python3 -c 'from openvino import Core; Core().get_property("MULTI", "SUPPORTED_PROPERTIES")'
          python3 -c 'from openvino import Core; Core().get_property("HETERO", "SUPPORTED_PROPERTIES")'
          python3 -c 'from openvino import Core; Core().get_property("BATCH", "SUPPORTED_PROPERTIES")'
          python3 -c 'from openvino.frontend import FrontEndManager; assert len(FrontEndManager().get_available_front_ends()) == 6'
          benchmark_app --help
          opt_in_out --help
          ovc --help

name: Clang-tidy static analysis (Ubuntu 24.04, Python 3.12, Clang-18, Clang-tidy-18)
on:
  # Secure label-based trigger only
  pull_request_target:
    types: [labeled]
  # Keep other triggers unchanged
  workflow_dispatch:
  push:
    branches:
      - master
      - 'releases/**'
  merge_group:

# Explicit permissions for writing checks and managing PRs
permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request_target' && github.event.number || github.run_id }}
  cancel-in-progress: true

env:
  RISCV_TOOLCHAIN_ROOT: /opt/riscv

jobs:
  # Security validation and trigger detection
  Check_Trigger:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.trigger_check.outputs.should_run }}
      pr_number: ${{ steps.trigger_check.outputs.pr_number }}
      pr_sha: ${{ steps.trigger_check.outputs.pr_sha }}
      checkout_ref: ${{ steps.trigger_check.outputs.checkout_ref }}
      trigger_source: ${{ steps.trigger_check.outputs.trigger_source }}
    steps:
      - name: Validate trigger and security
        id: trigger_check
        uses: actions/github-script@v7
        with:
          script: |
            let shouldRun = false;
            let prNumber, prSha, checkoutRef, triggerSource;
            
            if (context.eventName === 'pull_request_target') {
              // Label-based trigger validation
              if (context.payload.action !== 'labeled') {
                console.log('Not a label addition event');
                core.setOutput('should_run', 'false');
                return;
              }
              
              const labelName = context.payload.label.name;
              const validLabels = ['verify-clang-tidy', 'verify-all'];
              
              if (!validLabels.includes(labelName)) {
                console.log(`Label '${labelName}' is not a valid trigger label`);
                core.setOutput('should_run', 'false');
                return;
              }
              
              console.log(`Valid trigger label detected: ${labelName}`);
              
              // Get PR details from webhook payload (TOCTOU-safe)
              prNumber = context.payload.number;
              prSha = context.payload.pull_request.head.sha;
              checkoutRef = prSha; // Use specific SHA, not branch head
              triggerSource = `label:${labelName}`;
              
              // Permission validation - only users with write access can add labels
              const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: context.actor
              });
              
              if (!['admin', 'write'].includes(permission.permission)) {
                console.log(`User ${context.actor} does not have sufficient permissions (${permission.permission})`);
                
                // Remove the label and explain why
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  name: labelName
                });
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `Label \`${labelName}\` removed: only collaborators with write access can trigger workflows.\n\n@${context.actor}, please ask a maintainer to add this label.`
                });
                
                core.setOutput('should_run', 'false');
                return;
              }
              
              console.log(`Permission check passed for ${context.actor} (${permission.permission})`);
              shouldRun = true;
              
            } else {
              // Handle other triggers (workflow_dispatch, push, merge_group)
              console.log(`Non-PR trigger: ${context.eventName}`);
              shouldRun = true;
              checkoutRef = context.ref;
              triggerSource = context.eventName;
            }
            
            // Set outputs
            core.setOutput('should_run', shouldRun.toString());
            core.setOutput('pr_number', prNumber?.toString() || '');
            core.setOutput('pr_sha', prSha || '');
            core.setOutput('checkout_ref', checkoutRef);
            core.setOutput('trigger_source', triggerSource);
            
            // Create initial check run for PR triggers
            if (prNumber && prSha) {
              console.log(`Creating check run for PR #${prNumber} at SHA ${prSha}`);
              
              await github.rest.checks.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'Clang-tidy Analysis',
                head_sha: prSha,
                status: 'queued',
                started_at: new Date().toISOString(),
                output: {
                  title: 'Clang-tidy Analysis Queued',
                  summary: [
                    `**Triggered by**: ${triggerSource}`,
                    `**User**: @${context.actor}`,
                    `**SHA**: \`${prSha}\``,
                    `**Queued**: ${new Date().toISOString()}`,
                    '',
                    '_This workflow was triggered by adding a label. The specific commit SHA is locked to prevent TOCTOU attacks._'
                  ].join('\n')
                }
              });
            }

  Smart_CI:
    needs: Check_Trigger
    if: needs.Check_Trigger.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    outputs:
      affected_components: "${{ steps.smart_ci.outputs.affected_components }}"
      changed_components: "${{ steps.smart_ci.outputs.changed_components }}"
      skip_workflow: "${{ steps.smart_ci.outputs.skip_workflow }}"
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        timeout-minutes: 15
        with:
          sparse-checkout: .github/actions/smart-ci
          # For PR triggers, checkout the base branch for smart-ci (safe)
          # For other triggers, use the provided ref
          ref: ${{ github.event_name == 'pull_request_target' && github.ref || needs.Check_Trigger.outputs.checkout_ref }}

      - name: Get affected components
        id: smart_ci
        uses: ./.github/actions/smart-ci
        with:
          repository: ${{ github.repository }}
          pr: ${{ needs.Check_Trigger.outputs.pr_number }}
          commit_sha: ${{ needs.Check_Trigger.outputs.pr_sha || github.sha }}
          ref_name: ${{ github.event.pull_request.head.ref || github.ref_name }}
          component_pattern: "category: (.*)"
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          skip_when_only_listed_labels_set: 'docs'
          skip_when_only_listed_files_changed: '*.md,*.rst,*.png,*.jpg,*.svg,*/layer_tests_summary/*,*/conformance/*'

  # Centralized build decision logic
  Should_Build:
    runs-on: ubuntu-latest
    needs: [Smart_CI, Check_Trigger]
    if: needs.Check_Trigger.outputs.should_run == 'true'
    outputs:
      docker_should_run: ${{ steps.check.outputs.docker_should_run }}
      build_should_run: ${{ steps.check.outputs.build_should_run }}
    steps:
      - name: Determine build conditions
        id: check
        run: |
          # Check if workflow should be skipped
          if [[ "${{ needs.Smart_CI.outputs.skip_workflow }}" == "True" ]]; then
            echo "docker_should_run=false" >> $GITHUB_OUTPUT
            echo "build_should_run=false" >> $GITHUB_OUTPUT
            echo "Smart CI determined workflow should be skipped"
            exit 0
          fi
          
          # Docker should run if workflow not skipped
          echo "docker_should_run=true" >> $GITHUB_OUTPUT
          
          # Build should run if CPU component affected
          if [[ "${{ fromJSON(needs.Smart_CI.outputs.affected_components).CPU }}" == "true" ]]; then
            echo "build_should_run=true" >> $GITHUB_OUTPUT
            echo "CPU components affected - build will run"
          else
            echo "build_should_run=false" >> $GITHUB_OUTPUT
            echo "No CPU components affected - build will be skipped"
          fi

  Docker:
    needs: [Should_Build, Smart_CI, Check_Trigger]
    if: needs.Should_Build.outputs.docker_should_run == 'true'
    runs-on: aks-linux-4-cores-16gb-docker-build
    container:
      image: openvinogithubactions.azurecr.io/docker_build:0.2
      volumes:
        - /mount:/mount
    outputs:
      images: "${{ steps.handle_docker.outputs.images }}"
    steps:
      - name: Checkout for Docker setup
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        timeout-minutes: 15
        # Use base branch for Docker setup (safe)

      - uses: ./.github/actions/handle_docker
        id: handle_docker
        with:
          images: |
            ov_build/ubuntu_24_04_x64
            ov_build/ubuntu_22_04_riscv_xuantie
          registry: 'openvinogithubactions.azurecr.io'
          dockerfiles_root_dir: '.github/dockerfiles'
          changed_components: ${{ needs.Smart_CI.outputs.changed_components }}

  Docker_Arm:
    needs: [Should_Build, Smart_CI, Check_Trigger]
    if: needs.Should_Build.outputs.docker_should_run == 'true'
    runs-on: aks-linux-4-cores-8gb-arm-docker-build
    container:
      image: openvinogithubactions.azurecr.io/docker_build:0.2
      volumes:
        - /mount:/mount
    outputs:
      images: "${{ steps.handle_docker.outputs.images }}"
    steps:
      - name: Checkout for Docker setup
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        timeout-minutes: 15
        # Use base branch for Docker setup (safe)

      - uses: ./.github/actions/handle_docker
        id: handle_docker
        with:
          images: |
            ov_build/ubuntu_22_04_arm64
          registry: 'openvinogithubactions.azurecr.io'
          dockerfiles_root_dir: '.github/dockerfiles'
          changed_components: ${{ needs.Smart_CI.outputs.changed_components }}

  Build:
    needs: [Docker, Should_Build, Check_Trigger]
    if: needs.Should_Build.outputs.build_should_run == 'true'
    timeout-minutes: 150
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-16-cores-32gb
    container:
      image: ${{ fromJSON(needs.Docker.outputs.images).ov_build.ubuntu_24_04_x64 }}
      volumes:
        - /mount:/mount
      options: -e SCCACHE_AZURE_BLOB_CONTAINER -e SCCACHE_AZURE_CONNECTION_STRING
    env:
      DEBIAN_FRONTEND: noninteractive
      CMAKE_BUILD_TYPE: 'Release'
      CMAKE_GENERATOR: 'Ninja Multi-Config'
      CMAKE_CXX_COMPILER_LAUNCHER: sccache
      CMAKE_C_COMPILER_LAUNCHER: sccache
      CMAKE_COMPILE_WARNING_AS_ERROR: 'ON'
      SCCACHE_IGNORE_SERVER_IO_ERROR: 1
      SCCACHE_SERVER_PORT: 35555
      SCCACHE_ERROR_LOG: /__w/openvino/sccache_log.txt
      SCCACHE_LOG: warn
      GITHUB_WORKSPACE: '/__w/openvino/openvino'
      OPENVINO_REPO: /__w/openvino/openvino/openvino
      BUILD_DIR: /__w/openvino/openvino/openvino_build
      SCCACHE_AZURE_KEY_PREFIX: ubuntu24_x86_64_Release_itt_faster_build_clang_tidy
    steps:
      - name: Update check status to in_progress
        if: needs.Check_Trigger.outputs.pr_number != ''
        uses: actions/github-script@v7
        with:
          script: |
            // Find our check run
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ needs.Check_Trigger.outputs.pr_sha }}',
              check_name: 'Clang-tidy Analysis'
            });
            
            const ourCheck = checkRuns.check_runs.find(check => 
              check.status !== 'completed' && 
              check.name === 'Clang-tidy Analysis'
            );
            
            if (ourCheck) {
              await github.rest.checks.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                check_run_id: ourCheck.id,
                status: 'in_progress',
                started_at: new Date().toISOString(),
                output: {
                  title: '🔨 Building...',
                  summary: `Building commit \`${{ needs.Check_Trigger.outputs.pr_sha }}\`...\n\nTriggered by: ${{ needs.Check_Trigger.outputs.trigger_source }}`
                }
              });
            }

      # NOW checkout the specific PR SHA - after all security validation
      - name: Clone OpenVINO (Specific SHA)
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        timeout-minutes: 15
        with:
          path: ${{ env.OPENVINO_REPO }}
          submodules: 'true'
          ref: ${{ needs.Check_Trigger.outputs.checkout_ref }}

      - name: Verify checkout SHA (TOCTOU protection)
        if: needs.Check_Trigger.outputs.pr_sha != ''
        run: |
          cd ${{ env.OPENVINO_REPO }}
          ACTUAL_SHA=$(git rev-parse HEAD)
          EXPECTED_SHA="${{ needs.Check_Trigger.outputs.pr_sha }}"
          
          echo "Verifying checkout SHA..."
          echo "Expected SHA: $EXPECTED_SHA"
          echo "Actual SHA:   $ACTUAL_SHA"
          
          if [[ "$ACTUAL_SHA" != "$EXPECTED_SHA" ]]; then
            echo "CRITICAL: SHA mismatch detected!"
            echo "Expected: $EXPECTED_SHA"
            echo "Got:      $ACTUAL_SHA"
            echo "This indicates a potential TOCTOU attack or checkout error."
            exit 1
          fi
          
          echo "SHA verification passed - checkout is secure"

      - name: CMake configure
        run: |
          cmake \
            -G "${{ env.CMAKE_GENERATOR }}" \
            -DENABLE_CLANG_TIDY=ON \
            -DENABLE_PROFILING_ITT=ON \
            -DENABLE_DEBUG_CAPS=ON \
            -DSELECTIVE_BUILD=COLLECT \
            -DENABLE_PYTHON=OFF \
            -DENABLE_TESTS=OFF \
            -DENABLE_NCC_STYLE=OFF \
            -DENABLE_CPPLINT=OFF \
            -DENABLE_FASTER_BUILD=OFF \
            -DCMAKE_C_COMPILER_LAUNCHER=${{ env.CMAKE_C_COMPILER_LAUNCHER }} \
            -DCMAKE_CXX_COMPILER_LAUNCHER=${{ env.CMAKE_CXX_COMPILER_LAUNCHER }} \
            -S ${OPENVINO_REPO} \
            -B ${BUILD_DIR}

      - name: Cmake build with clang-tidy enabled
        id: build
        continue-on-error: true
        run: |
          cmake \
          --build ${BUILD_DIR} \
          --parallel $(($(nproc) - 1)) \
          --config ${{ env.CMAKE_BUILD_TYPE }} \
          --target openvino_intel_cpu_plugin \
          -- --quiet -k 0

      - name: Show sccache stats
        run: ${SCCACHE_PATH} --show-stats

  Build-aarch64:
    needs: [Docker_Arm, Should_Build, Check_Trigger]
    if: needs.Should_Build.outputs.build_should_run == 'true'
    timeout-minutes: 150
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-16-cores-32gb-arm
    container:
      image: ${{ fromJSON(needs.Docker_Arm.outputs.images).ov_build.ubuntu_22_04_arm64 }}
      volumes:
        - /mount:/mount
      options: -e SCCACHE_AZURE_BLOB_CONTAINER -e SCCACHE_AZURE_CONNECTION_STRING
    env:
      DEBIAN_FRONTEND: noninteractive
      CMAKE_BUILD_TYPE: 'Release'
      CMAKE_GENERATOR: 'Unix Makefiles'
      CMAKE_CXX_COMPILER_LAUNCHER: sccache
      CMAKE_C_COMPILER_LAUNCHER: sccache
      CMAKE_COMPILE_WARNING_AS_ERROR: 'ON'
      SCCACHE_IGNORE_SERVER_IO_ERROR: 1
      SCCACHE_SERVER_PORT: 35555
      SCCACHE_ERROR_LOG: /__w/openvino/sccache_log.txt
      SCCACHE_LOG: warn
      GITHUB_WORKSPACE: '/__w/openvino/openvino'
      OPENVINO_REPO: /__w/openvino/openvino/openvino
      BUILD_DIR: /__w/openvino/openvino/openvino_build
      SCCACHE_AZURE_KEY_PREFIX: ubuntu24_x86_64_Release_itt_faster_build_clang_tidy_aarch64
    steps:
      - name: Clone OpenVINO (Specific SHA)
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        timeout-minutes: 15
        with:
          path: ${{ env.OPENVINO_REPO }}
          submodules: 'true'
          ref: ${{ needs.Check_Trigger.outputs.checkout_ref }}

      - name: CMake configure
        run: |
          cmake \
            -G "${{ env.CMAKE_GENERATOR }}" \
            -DENABLE_CLANG_TIDY=ON \
            -DENABLE_PROFILING_ITT=ON \
            -DENABLE_DEBUG_CAPS=ON \
            -DSELECTIVE_BUILD=COLLECT \
            -DENABLE_PYTHON=OFF \
            -DENABLE_TESTS=OFF \
            -DENABLE_NCC_STYLE=OFF \
            -DENABLE_CPPLINT=OFF \
            -DENABLE_FASTER_BUILD=OFF \
            -DCMAKE_RULE_MESSAGES=OFF \
            -DCMAKE_C_COMPILER_LAUNCHER=${{ env.CMAKE_C_COMPILER_LAUNCHER }} \
            -DCMAKE_CXX_COMPILER_LAUNCHER=${{ env.CMAKE_CXX_COMPILER_LAUNCHER }} \
            -S ${OPENVINO_REPO} \
            -B ${BUILD_DIR}

      - name: Cmake build with clang-tidy enabled
        run: |
          cmake \
          --build ${BUILD_DIR} \
          --parallel $(($(nproc) - 1)) \
          --config ${{ env.CMAKE_BUILD_TYPE }} \
          --target openvino_intel_cpu_plugin \
          -- -k

      - name: Show sccache stats
        run: ${SCCACHE_PATH} --show-stats

  Build-riscv64:
    needs: [Docker, Should_Build, Check_Trigger]
    if: needs.Should_Build.outputs.build_should_run == 'true'
    timeout-minutes: 150
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-16-cores-32gb
    container:
      image: ${{ fromJSON(needs.Docker.outputs.images).ov_build.ubuntu_22_04_riscv_xuantie }}
      volumes:
        - /mount:/mount
      options: -e SCCACHE_AZURE_BLOB_CONTAINER -e SCCACHE_AZURE_CONNECTION_STRING
    env:
      DEBIAN_FRONTEND: noninteractive
      CMAKE_BUILD_TYPE: 'Release'
      CMAKE_GENERATOR: 'Unix Makefiles'
      CMAKE_CXX_COMPILER_LAUNCHER: sccache
      CMAKE_C_COMPILER_LAUNCHER: sccache
      CMAKE_COMPILE_WARNING_AS_ERROR: 'ON'
      SCCACHE_IGNORE_SERVER_IO_ERROR: 1
      SCCACHE_SERVER_PORT: 35555
      SCCACHE_ERROR_LOG: /__w/openvino/sccache_log.txt
      SCCACHE_LOG: warn
      GITHUB_WORKSPACE: '/__w/openvino/openvino'
      OPENVINO_REPO: /__w/openvino/openvino/openvino
      BUILD_DIR: /__w/openvino/openvino/openvino_build
      SCCACHE_AZURE_KEY_PREFIX: ubuntu24_x86_64_Release_itt_faster_build_clang_tidy_riscv64
    steps:
      - name: Clone OpenVINO (Specific SHA)
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        timeout-minutes: 15
        with:
          path: ${{ env.OPENVINO_REPO }}
          submodules: 'true'
          ref: ${{ needs.Check_Trigger.outputs.checkout_ref }}

      - name: CMake configure
        run: |
          cmake \
            -G "${{ env.CMAKE_GENERATOR }}" \
            -DCMAKE_TOOLCHAIN_FILE=cmake/toolchains/riscv64-100-xuantie-gnu.toolchain.cmake \
            -DENABLE_CLANG_TIDY=ON \
            -DENABLE_PROFILING_ITT=ON \
            -DENABLE_DEBUG_CAPS=ON \
            -DSELECTIVE_BUILD=COLLECT \
            -DENABLE_PYTHON=OFF \
            -DENABLE_TESTS=OFF \
            -DENABLE_NCC_STYLE=OFF \
            -DENABLE_CPPLINT=OFF \
            -DENABLE_FASTER_BUILD=OFF \
            -DCMAKE_RULE_MESSAGES=OFF \
            -DCMAKE_C_COMPILER_LAUNCHER=${{ env.CMAKE_C_COMPILER_LAUNCHER }} \
            -DCMAKE_CXX_COMPILER_LAUNCHER=${{ env.CMAKE_CXX_COMPILER_LAUNCHER }} \
            -S ${OPENVINO_REPO} \
            -B ${BUILD_DIR}

      - name: Cmake build with clang-tidy enabled
        run: |
          cmake \
          --build ${BUILD_DIR} \
          --parallel $(($(nproc) - 1)) \
          --config ${{ env.CMAKE_BUILD_TYPE }} \
          --target openvino_intel_cpu_plugin \
          -- -k

  # Report final results
  Overall_Status:
    name: ci/gha_overall_status_clang_tidy
    needs: [Should_Build, Build, Build-aarch64, Build-riscv64, Check_Trigger]
    if: ${{ always() && needs.Check_Trigger.outputs.should_run == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Report final status
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ needs.Check_Trigger.outputs.pr_number }}';
            const prSha = '${{ needs.Check_Trigger.outputs.pr_sha }}';
            const triggerSource = '${{ needs.Check_Trigger.outputs.trigger_source }}';
            
            // Determine overall result
            const buildResult = '${{ needs.Build.result }}';
            const buildAarch64Result = '${{ needs.Build-aarch64.result }}';
            const buildRiscvResult = '${{ needs.Build-riscv64.result }}';
            
            const allResults = [buildResult, buildAarch64Result, buildRiscvResult];
            const hasFailure = allResults.includes('failure');
            const hasSuccess = allResults.includes('success');
            
            let conclusion, title, summary;
            
            if (hasFailure) {
              conclusion = 'failure';
              title = 'Clang-tidy Analysis Failed';
              summary = 'One or more builds failed clang-tidy analysis.';
            } else if (hasSuccess) {
              conclusion = 'success';
              title = 'Clang-tidy Analysis Passed';
              summary = 'All builds passed clang-tidy analysis.';
            } else {
              conclusion = 'skipped';
              title = 'Clang-tidy Analysis Skipped';
              summary = 'No CPU components were affected, analysis was skipped.';
            }
            
            // Update check run if this was a PR trigger
            if (prNumber && prSha) {
              const { data: checkRuns } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: prSha,
                check_name: 'Clang-tidy Analysis'
              });
              
              const ourCheck = checkRuns.check_runs.find(check => 
                check.name === 'Clang-tidy Analysis'
              );
              
              if (ourCheck) {
                await github.rest.checks.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  check_run_id: ourCheck.id,
                  status: 'completed',
                  conclusion: conclusion,
                  completed_at: new Date().toISOString(),
                  output: {
                    title: title,
                    summary: [
                      summary,
                      '',
                      `**Trigger**: ${triggerSource}`,
                      `**SHA**: \`${prSha}\``,
                      `**Results**:`,
                      `- Build (x64): ${buildResult}`,
                      `- Build (ARM64): ${buildAarch64Result}`,
                      `- Build (RISC-V): ${buildRiscvResult}`,
                      '',
                      `_Completed at ${new Date().toISOString()}_`
                    ].join('\n')
                  }
                });
              }
              
              // Also post a summary comment
              const status = conclusion === 'success' ? 'passed' : conclusion === 'failure' ? 'failed' : 'was skipped';
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: [
                  `Clang-tidy analysis **${status}** for commit \`${prSha}\``,
                  '',
                  `Triggered by: ${triggerSource}`
                ].join('\n')
              });
            }
            
            // Set final job status
            if (conclusion === 'failure') {
              core.setFailed('Clang-tidy analysis failed');
            }

      - name: Check status of all jobs
        if: >-
          ${{
            contains(needs.*.result, 'failure') ||
            contains(needs.*.result, 'cancelled')
          }}
        run: exit 1
